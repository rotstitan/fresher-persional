/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vng.ppt.captchaservice.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TCaptchaToken implements org.apache.thrift.TBase<TCaptchaToken, TCaptchaToken._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCaptchaToken");

  private static final org.apache.thrift.protocol.TField CAPTCHA_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("captchaText", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EXPIRE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("expireTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TOKEN_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenIp", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("ipAddress", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCaptchaTokenStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCaptchaTokenTupleSchemeFactory());
  }

  public String captchaText; // required
  public long expireTime; // required
  public String tokenIp; // required
  public int ipAddress; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CAPTCHA_TEXT((short)1, "captchaText"),
    EXPIRE_TIME((short)2, "expireTime"),
    TOKEN_IP((short)3, "tokenIp"),
    IP_ADDRESS((short)4, "ipAddress");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CAPTCHA_TEXT
          return CAPTCHA_TEXT;
        case 2: // EXPIRE_TIME
          return EXPIRE_TIME;
        case 3: // TOKEN_IP
          return TOKEN_IP;
        case 4: // IP_ADDRESS
          return IP_ADDRESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXPIRETIME_ISSET_ID = 0;
  private static final int __IPADDRESS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CAPTCHA_TEXT, new org.apache.thrift.meta_data.FieldMetaData("captchaText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPIRE_TIME, new org.apache.thrift.meta_data.FieldMetaData("expireTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOKEN_IP, new org.apache.thrift.meta_data.FieldMetaData("tokenIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("ipAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCaptchaToken.class, metaDataMap);
  }

  public TCaptchaToken() {
  }

  public TCaptchaToken(
    String captchaText,
    long expireTime,
    String tokenIp,
    int ipAddress)
  {
    this();
    this.captchaText = captchaText;
    this.expireTime = expireTime;
    setExpireTimeIsSet(true);
    this.tokenIp = tokenIp;
    this.ipAddress = ipAddress;
    setIpAddressIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCaptchaToken(TCaptchaToken other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCaptchaText()) {
      this.captchaText = other.captchaText;
    }
    this.expireTime = other.expireTime;
    if (other.isSetTokenIp()) {
      this.tokenIp = other.tokenIp;
    }
    this.ipAddress = other.ipAddress;
  }

  public TCaptchaToken deepCopy() {
    return new TCaptchaToken(this);
  }

  @Override
  public void clear() {
    this.captchaText = null;
    setExpireTimeIsSet(false);
    this.expireTime = 0;
    this.tokenIp = null;
    setIpAddressIsSet(false);
    this.ipAddress = 0;
  }

  public String getCaptchaText() {
    return this.captchaText;
  }

  public TCaptchaToken setCaptchaText(String captchaText) {
    this.captchaText = captchaText;
    return this;
  }

  public void unsetCaptchaText() {
    this.captchaText = null;
  }

  /** Returns true if field captchaText is set (has been assigned a value) and false otherwise */
  public boolean isSetCaptchaText() {
    return this.captchaText != null;
  }

  public void setCaptchaTextIsSet(boolean value) {
    if (!value) {
      this.captchaText = null;
    }
  }

  public long getExpireTime() {
    return this.expireTime;
  }

  public TCaptchaToken setExpireTime(long expireTime) {
    this.expireTime = expireTime;
    setExpireTimeIsSet(true);
    return this;
  }

  public void unsetExpireTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIRETIME_ISSET_ID);
  }

  /** Returns true if field expireTime is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireTime() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIRETIME_ISSET_ID);
  }

  public void setExpireTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIRETIME_ISSET_ID, value);
  }

  public String getTokenIp() {
    return this.tokenIp;
  }

  public TCaptchaToken setTokenIp(String tokenIp) {
    this.tokenIp = tokenIp;
    return this;
  }

  public void unsetTokenIp() {
    this.tokenIp = null;
  }

  /** Returns true if field tokenIp is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenIp() {
    return this.tokenIp != null;
  }

  public void setTokenIpIsSet(boolean value) {
    if (!value) {
      this.tokenIp = null;
    }
  }

  public int getIpAddress() {
    return this.ipAddress;
  }

  public TCaptchaToken setIpAddress(int ipAddress) {
    this.ipAddress = ipAddress;
    setIpAddressIsSet(true);
    return this;
  }

  public void unsetIpAddress() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IPADDRESS_ISSET_ID);
  }

  /** Returns true if field ipAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetIpAddress() {
    return EncodingUtils.testBit(__isset_bitfield, __IPADDRESS_ISSET_ID);
  }

  public void setIpAddressIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IPADDRESS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CAPTCHA_TEXT:
      if (value == null) {
        unsetCaptchaText();
      } else {
        setCaptchaText((String)value);
      }
      break;

    case EXPIRE_TIME:
      if (value == null) {
        unsetExpireTime();
      } else {
        setExpireTime((Long)value);
      }
      break;

    case TOKEN_IP:
      if (value == null) {
        unsetTokenIp();
      } else {
        setTokenIp((String)value);
      }
      break;

    case IP_ADDRESS:
      if (value == null) {
        unsetIpAddress();
      } else {
        setIpAddress((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CAPTCHA_TEXT:
      return getCaptchaText();

    case EXPIRE_TIME:
      return Long.valueOf(getExpireTime());

    case TOKEN_IP:
      return getTokenIp();

    case IP_ADDRESS:
      return Integer.valueOf(getIpAddress());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CAPTCHA_TEXT:
      return isSetCaptchaText();
    case EXPIRE_TIME:
      return isSetExpireTime();
    case TOKEN_IP:
      return isSetTokenIp();
    case IP_ADDRESS:
      return isSetIpAddress();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCaptchaToken)
      return this.equals((TCaptchaToken)that);
    return false;
  }

  public boolean equals(TCaptchaToken that) {
    if (that == null)
      return false;

    boolean this_present_captchaText = true && this.isSetCaptchaText();
    boolean that_present_captchaText = true && that.isSetCaptchaText();
    if (this_present_captchaText || that_present_captchaText) {
      if (!(this_present_captchaText && that_present_captchaText))
        return false;
      if (!this.captchaText.equals(that.captchaText))
        return false;
    }

    boolean this_present_expireTime = true;
    boolean that_present_expireTime = true;
    if (this_present_expireTime || that_present_expireTime) {
      if (!(this_present_expireTime && that_present_expireTime))
        return false;
      if (this.expireTime != that.expireTime)
        return false;
    }

    boolean this_present_tokenIp = true && this.isSetTokenIp();
    boolean that_present_tokenIp = true && that.isSetTokenIp();
    if (this_present_tokenIp || that_present_tokenIp) {
      if (!(this_present_tokenIp && that_present_tokenIp))
        return false;
      if (!this.tokenIp.equals(that.tokenIp))
        return false;
    }

    boolean this_present_ipAddress = true;
    boolean that_present_ipAddress = true;
    if (this_present_ipAddress || that_present_ipAddress) {
      if (!(this_present_ipAddress && that_present_ipAddress))
        return false;
      if (this.ipAddress != that.ipAddress)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TCaptchaToken other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TCaptchaToken typedOther = (TCaptchaToken)other;

    lastComparison = Boolean.valueOf(isSetCaptchaText()).compareTo(typedOther.isSetCaptchaText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCaptchaText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.captchaText, typedOther.captchaText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpireTime()).compareTo(typedOther.isSetExpireTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireTime, typedOther.expireTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokenIp()).compareTo(typedOther.isSetTokenIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenIp, typedOther.tokenIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpAddress()).compareTo(typedOther.isSetIpAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipAddress, typedOther.ipAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCaptchaToken(");
    boolean first = true;

    sb.append("captchaText:");
    if (this.captchaText == null) {
      sb.append("null");
    } else {
      sb.append(this.captchaText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expireTime:");
    sb.append(this.expireTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tokenIp:");
    if (this.tokenIp == null) {
      sb.append("null");
    } else {
      sb.append(this.tokenIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ipAddress:");
    sb.append(this.ipAddress);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCaptchaTokenStandardSchemeFactory implements SchemeFactory {
    public TCaptchaTokenStandardScheme getScheme() {
      return new TCaptchaTokenStandardScheme();
    }
  }

  private static class TCaptchaTokenStandardScheme extends StandardScheme<TCaptchaToken> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCaptchaToken struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CAPTCHA_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.captchaText = iprot.readString();
              struct.setCaptchaTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXPIRE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expireTime = iprot.readI64();
              struct.setExpireTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOKEN_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tokenIp = iprot.readString();
              struct.setTokenIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IP_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ipAddress = iprot.readI32();
              struct.setIpAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCaptchaToken struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.captchaText != null) {
        oprot.writeFieldBegin(CAPTCHA_TEXT_FIELD_DESC);
        oprot.writeString(struct.captchaText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXPIRE_TIME_FIELD_DESC);
      oprot.writeI64(struct.expireTime);
      oprot.writeFieldEnd();
      if (struct.tokenIp != null) {
        oprot.writeFieldBegin(TOKEN_IP_FIELD_DESC);
        oprot.writeString(struct.tokenIp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IP_ADDRESS_FIELD_DESC);
      oprot.writeI32(struct.ipAddress);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCaptchaTokenTupleSchemeFactory implements SchemeFactory {
    public TCaptchaTokenTupleScheme getScheme() {
      return new TCaptchaTokenTupleScheme();
    }
  }

  private static class TCaptchaTokenTupleScheme extends TupleScheme<TCaptchaToken> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCaptchaToken struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCaptchaText()) {
        optionals.set(0);
      }
      if (struct.isSetExpireTime()) {
        optionals.set(1);
      }
      if (struct.isSetTokenIp()) {
        optionals.set(2);
      }
      if (struct.isSetIpAddress()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCaptchaText()) {
        oprot.writeString(struct.captchaText);
      }
      if (struct.isSetExpireTime()) {
        oprot.writeI64(struct.expireTime);
      }
      if (struct.isSetTokenIp()) {
        oprot.writeString(struct.tokenIp);
      }
      if (struct.isSetIpAddress()) {
        oprot.writeI32(struct.ipAddress);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCaptchaToken struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.captchaText = iprot.readString();
        struct.setCaptchaTextIsSet(true);
      }
      if (incoming.get(1)) {
        struct.expireTime = iprot.readI64();
        struct.setExpireTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tokenIp = iprot.readString();
        struct.setTokenIpIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ipAddress = iprot.readI32();
        struct.setIpAddressIsSet(true);
      }
    }
  }

}

