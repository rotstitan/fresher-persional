/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vng.ppt.captchaservice.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TCaptchaData implements org.apache.thrift.TBase<TCaptchaData, TCaptchaData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCaptchaData");

  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CAPTCHATEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("captchatext", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRIVATEKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("privatekey", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CLIENTIP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientip", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SERVERIP_FIELD_DESC = new org.apache.thrift.protocol.TField("serverip", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ACN_FIELD_DESC = new org.apache.thrift.protocol.TField("acn", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("zone", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCaptchaDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCaptchaDataTupleSchemeFactory());
  }

  public String token; // required
  public String captchatext; // required
  public String privatekey; // required
  public String clientip; // required
  public String serverip; // required
  public String acn; // required
  public String zone; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOKEN((short)1, "token"),
    CAPTCHATEXT((short)2, "captchatext"),
    PRIVATEKEY((short)3, "privatekey"),
    CLIENTIP((short)4, "clientip"),
    SERVERIP((short)5, "serverip"),
    ACN((short)6, "acn"),
    ZONE((short)7, "zone");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOKEN
          return TOKEN;
        case 2: // CAPTCHATEXT
          return CAPTCHATEXT;
        case 3: // PRIVATEKEY
          return PRIVATEKEY;
        case 4: // CLIENTIP
          return CLIENTIP;
        case 5: // SERVERIP
          return SERVERIP;
        case 6: // ACN
          return ACN;
        case 7: // ZONE
          return ZONE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.ZONE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAPTCHATEXT, new org.apache.thrift.meta_data.FieldMetaData("captchatext", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIVATEKEY, new org.apache.thrift.meta_data.FieldMetaData("privatekey", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENTIP, new org.apache.thrift.meta_data.FieldMetaData("clientip", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVERIP, new org.apache.thrift.meta_data.FieldMetaData("serverip", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACN, new org.apache.thrift.meta_data.FieldMetaData("acn", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ZONE, new org.apache.thrift.meta_data.FieldMetaData("zone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCaptchaData.class, metaDataMap);
  }

  public TCaptchaData() {
  }

  public TCaptchaData(
    String token,
    String captchatext,
    String privatekey,
    String clientip,
    String serverip,
    String acn)
  {
    this();
    this.token = token;
    this.captchatext = captchatext;
    this.privatekey = privatekey;
    this.clientip = clientip;
    this.serverip = serverip;
    this.acn = acn;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCaptchaData(TCaptchaData other) {
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetCaptchatext()) {
      this.captchatext = other.captchatext;
    }
    if (other.isSetPrivatekey()) {
      this.privatekey = other.privatekey;
    }
    if (other.isSetClientip()) {
      this.clientip = other.clientip;
    }
    if (other.isSetServerip()) {
      this.serverip = other.serverip;
    }
    if (other.isSetAcn()) {
      this.acn = other.acn;
    }
    if (other.isSetZone()) {
      this.zone = other.zone;
    }
  }

  public TCaptchaData deepCopy() {
    return new TCaptchaData(this);
  }

  @Override
  public void clear() {
    this.token = null;
    this.captchatext = null;
    this.privatekey = null;
    this.clientip = null;
    this.serverip = null;
    this.acn = null;
    this.zone = null;
  }

  public String getToken() {
    return this.token;
  }

  public TCaptchaData setToken(String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public String getCaptchatext() {
    return this.captchatext;
  }

  public TCaptchaData setCaptchatext(String captchatext) {
    this.captchatext = captchatext;
    return this;
  }

  public void unsetCaptchatext() {
    this.captchatext = null;
  }

  /** Returns true if field captchatext is set (has been assigned a value) and false otherwise */
  public boolean isSetCaptchatext() {
    return this.captchatext != null;
  }

  public void setCaptchatextIsSet(boolean value) {
    if (!value) {
      this.captchatext = null;
    }
  }

  public String getPrivatekey() {
    return this.privatekey;
  }

  public TCaptchaData setPrivatekey(String privatekey) {
    this.privatekey = privatekey;
    return this;
  }

  public void unsetPrivatekey() {
    this.privatekey = null;
  }

  /** Returns true if field privatekey is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivatekey() {
    return this.privatekey != null;
  }

  public void setPrivatekeyIsSet(boolean value) {
    if (!value) {
      this.privatekey = null;
    }
  }

  public String getClientip() {
    return this.clientip;
  }

  public TCaptchaData setClientip(String clientip) {
    this.clientip = clientip;
    return this;
  }

  public void unsetClientip() {
    this.clientip = null;
  }

  /** Returns true if field clientip is set (has been assigned a value) and false otherwise */
  public boolean isSetClientip() {
    return this.clientip != null;
  }

  public void setClientipIsSet(boolean value) {
    if (!value) {
      this.clientip = null;
    }
  }

  public String getServerip() {
    return this.serverip;
  }

  public TCaptchaData setServerip(String serverip) {
    this.serverip = serverip;
    return this;
  }

  public void unsetServerip() {
    this.serverip = null;
  }

  /** Returns true if field serverip is set (has been assigned a value) and false otherwise */
  public boolean isSetServerip() {
    return this.serverip != null;
  }

  public void setServeripIsSet(boolean value) {
    if (!value) {
      this.serverip = null;
    }
  }

  public String getAcn() {
    return this.acn;
  }

  public TCaptchaData setAcn(String acn) {
    this.acn = acn;
    return this;
  }

  public void unsetAcn() {
    this.acn = null;
  }

  /** Returns true if field acn is set (has been assigned a value) and false otherwise */
  public boolean isSetAcn() {
    return this.acn != null;
  }

  public void setAcnIsSet(boolean value) {
    if (!value) {
      this.acn = null;
    }
  }

  public String getZone() {
    return this.zone;
  }

  public TCaptchaData setZone(String zone) {
    this.zone = zone;
    return this;
  }

  public void unsetZone() {
    this.zone = null;
  }

  /** Returns true if field zone is set (has been assigned a value) and false otherwise */
  public boolean isSetZone() {
    return this.zone != null;
  }

  public void setZoneIsSet(boolean value) {
    if (!value) {
      this.zone = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((String)value);
      }
      break;

    case CAPTCHATEXT:
      if (value == null) {
        unsetCaptchatext();
      } else {
        setCaptchatext((String)value);
      }
      break;

    case PRIVATEKEY:
      if (value == null) {
        unsetPrivatekey();
      } else {
        setPrivatekey((String)value);
      }
      break;

    case CLIENTIP:
      if (value == null) {
        unsetClientip();
      } else {
        setClientip((String)value);
      }
      break;

    case SERVERIP:
      if (value == null) {
        unsetServerip();
      } else {
        setServerip((String)value);
      }
      break;

    case ACN:
      if (value == null) {
        unsetAcn();
      } else {
        setAcn((String)value);
      }
      break;

    case ZONE:
      if (value == null) {
        unsetZone();
      } else {
        setZone((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOKEN:
      return getToken();

    case CAPTCHATEXT:
      return getCaptchatext();

    case PRIVATEKEY:
      return getPrivatekey();

    case CLIENTIP:
      return getClientip();

    case SERVERIP:
      return getServerip();

    case ACN:
      return getAcn();

    case ZONE:
      return getZone();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOKEN:
      return isSetToken();
    case CAPTCHATEXT:
      return isSetCaptchatext();
    case PRIVATEKEY:
      return isSetPrivatekey();
    case CLIENTIP:
      return isSetClientip();
    case SERVERIP:
      return isSetServerip();
    case ACN:
      return isSetAcn();
    case ZONE:
      return isSetZone();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCaptchaData)
      return this.equals((TCaptchaData)that);
    return false;
  }

  public boolean equals(TCaptchaData that) {
    if (that == null)
      return false;

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_captchatext = true && this.isSetCaptchatext();
    boolean that_present_captchatext = true && that.isSetCaptchatext();
    if (this_present_captchatext || that_present_captchatext) {
      if (!(this_present_captchatext && that_present_captchatext))
        return false;
      if (!this.captchatext.equals(that.captchatext))
        return false;
    }

    boolean this_present_privatekey = true && this.isSetPrivatekey();
    boolean that_present_privatekey = true && that.isSetPrivatekey();
    if (this_present_privatekey || that_present_privatekey) {
      if (!(this_present_privatekey && that_present_privatekey))
        return false;
      if (!this.privatekey.equals(that.privatekey))
        return false;
    }

    boolean this_present_clientip = true && this.isSetClientip();
    boolean that_present_clientip = true && that.isSetClientip();
    if (this_present_clientip || that_present_clientip) {
      if (!(this_present_clientip && that_present_clientip))
        return false;
      if (!this.clientip.equals(that.clientip))
        return false;
    }

    boolean this_present_serverip = true && this.isSetServerip();
    boolean that_present_serverip = true && that.isSetServerip();
    if (this_present_serverip || that_present_serverip) {
      if (!(this_present_serverip && that_present_serverip))
        return false;
      if (!this.serverip.equals(that.serverip))
        return false;
    }

    boolean this_present_acn = true && this.isSetAcn();
    boolean that_present_acn = true && that.isSetAcn();
    if (this_present_acn || that_present_acn) {
      if (!(this_present_acn && that_present_acn))
        return false;
      if (!this.acn.equals(that.acn))
        return false;
    }

    boolean this_present_zone = true && this.isSetZone();
    boolean that_present_zone = true && that.isSetZone();
    if (this_present_zone || that_present_zone) {
      if (!(this_present_zone && that_present_zone))
        return false;
      if (!this.zone.equals(that.zone))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TCaptchaData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TCaptchaData typedOther = (TCaptchaData)other;

    lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCaptchatext()).compareTo(typedOther.isSetCaptchatext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCaptchatext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.captchatext, typedOther.captchatext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrivatekey()).compareTo(typedOther.isSetPrivatekey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivatekey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privatekey, typedOther.privatekey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientip()).compareTo(typedOther.isSetClientip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientip, typedOther.clientip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerip()).compareTo(typedOther.isSetServerip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverip, typedOther.serverip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcn()).compareTo(typedOther.isSetAcn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acn, typedOther.acn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZone()).compareTo(typedOther.isSetZone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zone, typedOther.zone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCaptchaData(");
    boolean first = true;

    sb.append("token:");
    if (this.token == null) {
      sb.append("null");
    } else {
      sb.append(this.token);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("captchatext:");
    if (this.captchatext == null) {
      sb.append("null");
    } else {
      sb.append(this.captchatext);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("privatekey:");
    if (this.privatekey == null) {
      sb.append("null");
    } else {
      sb.append(this.privatekey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientip:");
    if (this.clientip == null) {
      sb.append("null");
    } else {
      sb.append(this.clientip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverip:");
    if (this.serverip == null) {
      sb.append("null");
    } else {
      sb.append(this.serverip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acn:");
    if (this.acn == null) {
      sb.append("null");
    } else {
      sb.append(this.acn);
    }
    first = false;
    if (isSetZone()) {
      if (!first) sb.append(", ");
      sb.append("zone:");
      if (this.zone == null) {
        sb.append("null");
      } else {
        sb.append(this.zone);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (token == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
    }
    if (captchatext == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'captchatext' was not present! Struct: " + toString());
    }
    if (privatekey == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'privatekey' was not present! Struct: " + toString());
    }
    if (clientip == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clientip' was not present! Struct: " + toString());
    }
    if (serverip == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serverip' was not present! Struct: " + toString());
    }
    if (acn == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'acn' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCaptchaDataStandardSchemeFactory implements SchemeFactory {
    public TCaptchaDataStandardScheme getScheme() {
      return new TCaptchaDataStandardScheme();
    }
  }

  private static class TCaptchaDataStandardScheme extends StandardScheme<TCaptchaData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCaptchaData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CAPTCHATEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.captchatext = iprot.readString();
              struct.setCaptchatextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRIVATEKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.privatekey = iprot.readString();
              struct.setPrivatekeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CLIENTIP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientip = iprot.readString();
              struct.setClientipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SERVERIP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverip = iprot.readString();
              struct.setServeripIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acn = iprot.readString();
              struct.setAcnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zone = iprot.readString();
              struct.setZoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCaptchaData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(struct.token);
        oprot.writeFieldEnd();
      }
      if (struct.captchatext != null) {
        oprot.writeFieldBegin(CAPTCHATEXT_FIELD_DESC);
        oprot.writeString(struct.captchatext);
        oprot.writeFieldEnd();
      }
      if (struct.privatekey != null) {
        oprot.writeFieldBegin(PRIVATEKEY_FIELD_DESC);
        oprot.writeString(struct.privatekey);
        oprot.writeFieldEnd();
      }
      if (struct.clientip != null) {
        oprot.writeFieldBegin(CLIENTIP_FIELD_DESC);
        oprot.writeString(struct.clientip);
        oprot.writeFieldEnd();
      }
      if (struct.serverip != null) {
        oprot.writeFieldBegin(SERVERIP_FIELD_DESC);
        oprot.writeString(struct.serverip);
        oprot.writeFieldEnd();
      }
      if (struct.acn != null) {
        oprot.writeFieldBegin(ACN_FIELD_DESC);
        oprot.writeString(struct.acn);
        oprot.writeFieldEnd();
      }
      if (struct.zone != null) {
        if (struct.isSetZone()) {
          oprot.writeFieldBegin(ZONE_FIELD_DESC);
          oprot.writeString(struct.zone);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCaptchaDataTupleSchemeFactory implements SchemeFactory {
    public TCaptchaDataTupleScheme getScheme() {
      return new TCaptchaDataTupleScheme();
    }
  }

  private static class TCaptchaDataTupleScheme extends TupleScheme<TCaptchaData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCaptchaData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.token);
      oprot.writeString(struct.captchatext);
      oprot.writeString(struct.privatekey);
      oprot.writeString(struct.clientip);
      oprot.writeString(struct.serverip);
      oprot.writeString(struct.acn);
      BitSet optionals = new BitSet();
      if (struct.isSetZone()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetZone()) {
        oprot.writeString(struct.zone);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCaptchaData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.token = iprot.readString();
      struct.setTokenIsSet(true);
      struct.captchatext = iprot.readString();
      struct.setCaptchatextIsSet(true);
      struct.privatekey = iprot.readString();
      struct.setPrivatekeyIsSet(true);
      struct.clientip = iprot.readString();
      struct.setClientipIsSet(true);
      struct.serverip = iprot.readString();
      struct.setServeripIsSet(true);
      struct.acn = iprot.readString();
      struct.setAcnIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.zone = iprot.readString();
        struct.setZoneIsSet(true);
      }
    }
  }

}

