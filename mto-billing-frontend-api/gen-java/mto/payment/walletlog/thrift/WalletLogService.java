/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package mto.payment.walletlog.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WalletLogService {

  public interface Iface {

    public TWalletLogGetHistory getItemHistory(String gameID, String userID, String serverID, String roleID, String itemID, long from, long to) throws org.apache.thrift.TException;

    public TWalletLogGetStatus getItemStatus(String gameID, String userID, String serverID, String roleID, String itemID, long timestamp) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getItemHistory(String gameID, String userID, String serverID, String roleID, String itemID, long from, long to, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getItemHistory_call> resultHandler) throws org.apache.thrift.TException;

    public void getItemStatus(String gameID, String userID, String serverID, String roleID, String itemID, long timestamp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getItemStatus_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TWalletLogGetHistory getItemHistory(String gameID, String userID, String serverID, String roleID, String itemID, long from, long to) throws org.apache.thrift.TException
    {
      send_getItemHistory(gameID, userID, serverID, roleID, itemID, from, to);
      return recv_getItemHistory();
    }

    public void send_getItemHistory(String gameID, String userID, String serverID, String roleID, String itemID, long from, long to) throws org.apache.thrift.TException
    {
      getItemHistory_args args = new getItemHistory_args();
      args.setGameID(gameID);
      args.setUserID(userID);
      args.setServerID(serverID);
      args.setRoleID(roleID);
      args.setItemID(itemID);
      args.setFrom(from);
      args.setTo(to);
      sendBase("getItemHistory", args);
    }

    public TWalletLogGetHistory recv_getItemHistory() throws org.apache.thrift.TException
    {
      getItemHistory_result result = new getItemHistory_result();
      receiveBase(result, "getItemHistory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getItemHistory failed: unknown result");
    }

    public TWalletLogGetStatus getItemStatus(String gameID, String userID, String serverID, String roleID, String itemID, long timestamp) throws org.apache.thrift.TException
    {
      send_getItemStatus(gameID, userID, serverID, roleID, itemID, timestamp);
      return recv_getItemStatus();
    }

    public void send_getItemStatus(String gameID, String userID, String serverID, String roleID, String itemID, long timestamp) throws org.apache.thrift.TException
    {
      getItemStatus_args args = new getItemStatus_args();
      args.setGameID(gameID);
      args.setUserID(userID);
      args.setServerID(serverID);
      args.setRoleID(roleID);
      args.setItemID(itemID);
      args.setTimestamp(timestamp);
      sendBase("getItemStatus", args);
    }

    public TWalletLogGetStatus recv_getItemStatus() throws org.apache.thrift.TException
    {
      getItemStatus_result result = new getItemStatus_result();
      receiveBase(result, "getItemStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getItemStatus failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getItemHistory(String gameID, String userID, String serverID, String roleID, String itemID, long from, long to, org.apache.thrift.async.AsyncMethodCallback<getItemHistory_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getItemHistory_call method_call = new getItemHistory_call(gameID, userID, serverID, roleID, itemID, from, to, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getItemHistory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String gameID;
      private String userID;
      private String serverID;
      private String roleID;
      private String itemID;
      private long from;
      private long to;
      public getItemHistory_call(String gameID, String userID, String serverID, String roleID, String itemID, long from, long to, org.apache.thrift.async.AsyncMethodCallback<getItemHistory_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gameID = gameID;
        this.userID = userID;
        this.serverID = serverID;
        this.roleID = roleID;
        this.itemID = itemID;
        this.from = from;
        this.to = to;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getItemHistory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getItemHistory_args args = new getItemHistory_args();
        args.setGameID(gameID);
        args.setUserID(userID);
        args.setServerID(serverID);
        args.setRoleID(roleID);
        args.setItemID(itemID);
        args.setFrom(from);
        args.setTo(to);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TWalletLogGetHistory getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getItemHistory();
      }
    }

    public void getItemStatus(String gameID, String userID, String serverID, String roleID, String itemID, long timestamp, org.apache.thrift.async.AsyncMethodCallback<getItemStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getItemStatus_call method_call = new getItemStatus_call(gameID, userID, serverID, roleID, itemID, timestamp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getItemStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String gameID;
      private String userID;
      private String serverID;
      private String roleID;
      private String itemID;
      private long timestamp;
      public getItemStatus_call(String gameID, String userID, String serverID, String roleID, String itemID, long timestamp, org.apache.thrift.async.AsyncMethodCallback<getItemStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gameID = gameID;
        this.userID = userID;
        this.serverID = serverID;
        this.roleID = roleID;
        this.itemID = itemID;
        this.timestamp = timestamp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getItemStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getItemStatus_args args = new getItemStatus_args();
        args.setGameID(gameID);
        args.setUserID(userID);
        args.setServerID(serverID);
        args.setRoleID(roleID);
        args.setItemID(itemID);
        args.setTimestamp(timestamp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TWalletLogGetStatus getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getItemStatus();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getItemHistory", new getItemHistory());
      processMap.put("getItemStatus", new getItemStatus());
      return processMap;
    }

    public static class getItemHistory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getItemHistory_args> {
      public getItemHistory() {
        super("getItemHistory");
      }

      public getItemHistory_args getEmptyArgsInstance() {
        return new getItemHistory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getItemHistory_result getResult(I iface, getItemHistory_args args) throws org.apache.thrift.TException {
        getItemHistory_result result = new getItemHistory_result();
        result.success = iface.getItemHistory(args.gameID, args.userID, args.serverID, args.roleID, args.itemID, args.from, args.to);
        return result;
      }
    }

    public static class getItemStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getItemStatus_args> {
      public getItemStatus() {
        super("getItemStatus");
      }

      public getItemStatus_args getEmptyArgsInstance() {
        return new getItemStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getItemStatus_result getResult(I iface, getItemStatus_args args) throws org.apache.thrift.TException {
        getItemStatus_result result = new getItemStatus_result();
        result.success = iface.getItemStatus(args.gameID, args.userID, args.serverID, args.roleID, args.itemID, args.timestamp);
        return result;
      }
    }

  }

  public static class getItemHistory_args implements org.apache.thrift.TBase<getItemHistory_args, getItemHistory_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getItemHistory_args");

    private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverID", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ROLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleID", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemID", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("from", org.apache.thrift.protocol.TType.I64, (short)6);
    private static final org.apache.thrift.protocol.TField TO_FIELD_DESC = new org.apache.thrift.protocol.TField("to", org.apache.thrift.protocol.TType.I64, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getItemHistory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getItemHistory_argsTupleSchemeFactory());
    }

    public String gameID; // required
    public String userID; // required
    public String serverID; // required
    public String roleID; // required
    public String itemID; // required
    public long from; // required
    public long to; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GAME_ID((short)1, "gameID"),
      USER_ID((short)2, "userID"),
      SERVER_ID((short)3, "serverID"),
      ROLE_ID((short)4, "roleID"),
      ITEM_ID((short)5, "itemID"),
      FROM((short)6, "from"),
      TO((short)7, "to");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GAME_ID
            return GAME_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // SERVER_ID
            return SERVER_ID;
          case 4: // ROLE_ID
            return ROLE_ID;
          case 5: // ITEM_ID
            return ITEM_ID;
          case 6: // FROM
            return FROM;
          case 7: // TO
            return TO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FROM_ISSET_ID = 0;
    private static final int __TO_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROLE_ID, new org.apache.thrift.meta_data.FieldMetaData("roleID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FROM, new org.apache.thrift.meta_data.FieldMetaData("from", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TO, new org.apache.thrift.meta_data.FieldMetaData("to", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getItemHistory_args.class, metaDataMap);
    }

    public getItemHistory_args() {
    }

    public getItemHistory_args(
      String gameID,
      String userID,
      String serverID,
      String roleID,
      String itemID,
      long from,
      long to)
    {
      this();
      this.gameID = gameID;
      this.userID = userID;
      this.serverID = serverID;
      this.roleID = roleID;
      this.itemID = itemID;
      this.from = from;
      setFromIsSet(true);
      this.to = to;
      setToIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getItemHistory_args(getItemHistory_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetGameID()) {
        this.gameID = other.gameID;
      }
      if (other.isSetUserID()) {
        this.userID = other.userID;
      }
      if (other.isSetServerID()) {
        this.serverID = other.serverID;
      }
      if (other.isSetRoleID()) {
        this.roleID = other.roleID;
      }
      if (other.isSetItemID()) {
        this.itemID = other.itemID;
      }
      this.from = other.from;
      this.to = other.to;
    }

    public getItemHistory_args deepCopy() {
      return new getItemHistory_args(this);
    }

    @Override
    public void clear() {
      this.gameID = null;
      this.userID = null;
      this.serverID = null;
      this.roleID = null;
      this.itemID = null;
      setFromIsSet(false);
      this.from = 0;
      setToIsSet(false);
      this.to = 0;
    }

    public String getGameID() {
      return this.gameID;
    }

    public getItemHistory_args setGameID(String gameID) {
      this.gameID = gameID;
      return this;
    }

    public void unsetGameID() {
      this.gameID = null;
    }

    /** Returns true if field gameID is set (has been assigned a value) and false otherwise */
    public boolean isSetGameID() {
      return this.gameID != null;
    }

    public void setGameIDIsSet(boolean value) {
      if (!value) {
        this.gameID = null;
      }
    }

    public String getUserID() {
      return this.userID;
    }

    public getItemHistory_args setUserID(String userID) {
      this.userID = userID;
      return this;
    }

    public void unsetUserID() {
      this.userID = null;
    }

    /** Returns true if field userID is set (has been assigned a value) and false otherwise */
    public boolean isSetUserID() {
      return this.userID != null;
    }

    public void setUserIDIsSet(boolean value) {
      if (!value) {
        this.userID = null;
      }
    }

    public String getServerID() {
      return this.serverID;
    }

    public getItemHistory_args setServerID(String serverID) {
      this.serverID = serverID;
      return this;
    }

    public void unsetServerID() {
      this.serverID = null;
    }

    /** Returns true if field serverID is set (has been assigned a value) and false otherwise */
    public boolean isSetServerID() {
      return this.serverID != null;
    }

    public void setServerIDIsSet(boolean value) {
      if (!value) {
        this.serverID = null;
      }
    }

    public String getRoleID() {
      return this.roleID;
    }

    public getItemHistory_args setRoleID(String roleID) {
      this.roleID = roleID;
      return this;
    }

    public void unsetRoleID() {
      this.roleID = null;
    }

    /** Returns true if field roleID is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleID() {
      return this.roleID != null;
    }

    public void setRoleIDIsSet(boolean value) {
      if (!value) {
        this.roleID = null;
      }
    }

    public String getItemID() {
      return this.itemID;
    }

    public getItemHistory_args setItemID(String itemID) {
      this.itemID = itemID;
      return this;
    }

    public void unsetItemID() {
      this.itemID = null;
    }

    /** Returns true if field itemID is set (has been assigned a value) and false otherwise */
    public boolean isSetItemID() {
      return this.itemID != null;
    }

    public void setItemIDIsSet(boolean value) {
      if (!value) {
        this.itemID = null;
      }
    }

    public long getFrom() {
      return this.from;
    }

    public getItemHistory_args setFrom(long from) {
      this.from = from;
      setFromIsSet(true);
      return this;
    }

    public void unsetFrom() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROM_ISSET_ID);
    }

    /** Returns true if field from is set (has been assigned a value) and false otherwise */
    public boolean isSetFrom() {
      return EncodingUtils.testBit(__isset_bitfield, __FROM_ISSET_ID);
    }

    public void setFromIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROM_ISSET_ID, value);
    }

    public long getTo() {
      return this.to;
    }

    public getItemHistory_args setTo(long to) {
      this.to = to;
      setToIsSet(true);
      return this;
    }

    public void unsetTo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TO_ISSET_ID);
    }

    /** Returns true if field to is set (has been assigned a value) and false otherwise */
    public boolean isSetTo() {
      return EncodingUtils.testBit(__isset_bitfield, __TO_ISSET_ID);
    }

    public void setToIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GAME_ID:
        if (value == null) {
          unsetGameID();
        } else {
          setGameID((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserID();
        } else {
          setUserID((String)value);
        }
        break;

      case SERVER_ID:
        if (value == null) {
          unsetServerID();
        } else {
          setServerID((String)value);
        }
        break;

      case ROLE_ID:
        if (value == null) {
          unsetRoleID();
        } else {
          setRoleID((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItemID();
        } else {
          setItemID((String)value);
        }
        break;

      case FROM:
        if (value == null) {
          unsetFrom();
        } else {
          setFrom((Long)value);
        }
        break;

      case TO:
        if (value == null) {
          unsetTo();
        } else {
          setTo((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GAME_ID:
        return getGameID();

      case USER_ID:
        return getUserID();

      case SERVER_ID:
        return getServerID();

      case ROLE_ID:
        return getRoleID();

      case ITEM_ID:
        return getItemID();

      case FROM:
        return Long.valueOf(getFrom());

      case TO:
        return Long.valueOf(getTo());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GAME_ID:
        return isSetGameID();
      case USER_ID:
        return isSetUserID();
      case SERVER_ID:
        return isSetServerID();
      case ROLE_ID:
        return isSetRoleID();
      case ITEM_ID:
        return isSetItemID();
      case FROM:
        return isSetFrom();
      case TO:
        return isSetTo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getItemHistory_args)
        return this.equals((getItemHistory_args)that);
      return false;
    }

    public boolean equals(getItemHistory_args that) {
      if (that == null)
        return false;

      boolean this_present_gameID = true && this.isSetGameID();
      boolean that_present_gameID = true && that.isSetGameID();
      if (this_present_gameID || that_present_gameID) {
        if (!(this_present_gameID && that_present_gameID))
          return false;
        if (!this.gameID.equals(that.gameID))
          return false;
      }

      boolean this_present_userID = true && this.isSetUserID();
      boolean that_present_userID = true && that.isSetUserID();
      if (this_present_userID || that_present_userID) {
        if (!(this_present_userID && that_present_userID))
          return false;
        if (!this.userID.equals(that.userID))
          return false;
      }

      boolean this_present_serverID = true && this.isSetServerID();
      boolean that_present_serverID = true && that.isSetServerID();
      if (this_present_serverID || that_present_serverID) {
        if (!(this_present_serverID && that_present_serverID))
          return false;
        if (!this.serverID.equals(that.serverID))
          return false;
      }

      boolean this_present_roleID = true && this.isSetRoleID();
      boolean that_present_roleID = true && that.isSetRoleID();
      if (this_present_roleID || that_present_roleID) {
        if (!(this_present_roleID && that_present_roleID))
          return false;
        if (!this.roleID.equals(that.roleID))
          return false;
      }

      boolean this_present_itemID = true && this.isSetItemID();
      boolean that_present_itemID = true && that.isSetItemID();
      if (this_present_itemID || that_present_itemID) {
        if (!(this_present_itemID && that_present_itemID))
          return false;
        if (!this.itemID.equals(that.itemID))
          return false;
      }

      boolean this_present_from = true;
      boolean that_present_from = true;
      if (this_present_from || that_present_from) {
        if (!(this_present_from && that_present_from))
          return false;
        if (this.from != that.from)
          return false;
      }

      boolean this_present_to = true;
      boolean that_present_to = true;
      if (this_present_to || that_present_to) {
        if (!(this_present_to && that_present_to))
          return false;
        if (this.to != that.to)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getItemHistory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getItemHistory_args typedOther = (getItemHistory_args)other;

      lastComparison = Boolean.valueOf(isSetGameID()).compareTo(typedOther.isSetGameID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameID, typedOther.gameID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, typedOther.userID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerID()).compareTo(typedOther.isSetServerID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverID, typedOther.serverID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRoleID()).compareTo(typedOther.isSetRoleID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleID, typedOther.roleID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemID()).compareTo(typedOther.isSetItemID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemID, typedOther.itemID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFrom()).compareTo(typedOther.isSetFrom());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFrom()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.from, typedOther.from);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTo()).compareTo(typedOther.isSetTo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.to, typedOther.to);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getItemHistory_args(");
      boolean first = true;

      sb.append("gameID:");
      if (this.gameID == null) {
        sb.append("null");
      } else {
        sb.append(this.gameID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userID:");
      if (this.userID == null) {
        sb.append("null");
      } else {
        sb.append(this.userID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverID:");
      if (this.serverID == null) {
        sb.append("null");
      } else {
        sb.append(this.serverID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roleID:");
      if (this.roleID == null) {
        sb.append("null");
      } else {
        sb.append(this.roleID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemID:");
      if (this.itemID == null) {
        sb.append("null");
      } else {
        sb.append(this.itemID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("from:");
      sb.append(this.from);
      first = false;
      if (!first) sb.append(", ");
      sb.append("to:");
      sb.append(this.to);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getItemHistory_argsStandardSchemeFactory implements SchemeFactory {
      public getItemHistory_argsStandardScheme getScheme() {
        return new getItemHistory_argsStandardScheme();
      }
    }

    private static class getItemHistory_argsStandardScheme extends StandardScheme<getItemHistory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getItemHistory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GAME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gameID = iprot.readString();
                struct.setGameIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userID = iprot.readString();
                struct.setUserIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serverID = iprot.readString();
                struct.setServerIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ROLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roleID = iprot.readString();
                struct.setRoleIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.itemID = iprot.readString();
                struct.setItemIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // FROM
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.from = iprot.readI64();
                struct.setFromIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // TO
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.to = iprot.readI64();
                struct.setToIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getItemHistory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gameID != null) {
          oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
          oprot.writeString(struct.gameID);
          oprot.writeFieldEnd();
        }
        if (struct.userID != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userID);
          oprot.writeFieldEnd();
        }
        if (struct.serverID != null) {
          oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
          oprot.writeString(struct.serverID);
          oprot.writeFieldEnd();
        }
        if (struct.roleID != null) {
          oprot.writeFieldBegin(ROLE_ID_FIELD_DESC);
          oprot.writeString(struct.roleID);
          oprot.writeFieldEnd();
        }
        if (struct.itemID != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.itemID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FROM_FIELD_DESC);
        oprot.writeI64(struct.from);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TO_FIELD_DESC);
        oprot.writeI64(struct.to);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getItemHistory_argsTupleSchemeFactory implements SchemeFactory {
      public getItemHistory_argsTupleScheme getScheme() {
        return new getItemHistory_argsTupleScheme();
      }
    }

    private static class getItemHistory_argsTupleScheme extends TupleScheme<getItemHistory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getItemHistory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGameID()) {
          optionals.set(0);
        }
        if (struct.isSetUserID()) {
          optionals.set(1);
        }
        if (struct.isSetServerID()) {
          optionals.set(2);
        }
        if (struct.isSetRoleID()) {
          optionals.set(3);
        }
        if (struct.isSetItemID()) {
          optionals.set(4);
        }
        if (struct.isSetFrom()) {
          optionals.set(5);
        }
        if (struct.isSetTo()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetGameID()) {
          oprot.writeString(struct.gameID);
        }
        if (struct.isSetUserID()) {
          oprot.writeString(struct.userID);
        }
        if (struct.isSetServerID()) {
          oprot.writeString(struct.serverID);
        }
        if (struct.isSetRoleID()) {
          oprot.writeString(struct.roleID);
        }
        if (struct.isSetItemID()) {
          oprot.writeString(struct.itemID);
        }
        if (struct.isSetFrom()) {
          oprot.writeI64(struct.from);
        }
        if (struct.isSetTo()) {
          oprot.writeI64(struct.to);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getItemHistory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.gameID = iprot.readString();
          struct.setGameIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userID = iprot.readString();
          struct.setUserIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.serverID = iprot.readString();
          struct.setServerIDIsSet(true);
        }
        if (incoming.get(3)) {
          struct.roleID = iprot.readString();
          struct.setRoleIDIsSet(true);
        }
        if (incoming.get(4)) {
          struct.itemID = iprot.readString();
          struct.setItemIDIsSet(true);
        }
        if (incoming.get(5)) {
          struct.from = iprot.readI64();
          struct.setFromIsSet(true);
        }
        if (incoming.get(6)) {
          struct.to = iprot.readI64();
          struct.setToIsSet(true);
        }
      }
    }

  }

  public static class getItemHistory_result implements org.apache.thrift.TBase<getItemHistory_result, getItemHistory_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getItemHistory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getItemHistory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getItemHistory_resultTupleSchemeFactory());
    }

    public TWalletLogGetHistory success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TWalletLogGetHistory.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getItemHistory_result.class, metaDataMap);
    }

    public getItemHistory_result() {
    }

    public getItemHistory_result(
      TWalletLogGetHistory success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getItemHistory_result(getItemHistory_result other) {
      if (other.isSetSuccess()) {
        this.success = new TWalletLogGetHistory(other.success);
      }
    }

    public getItemHistory_result deepCopy() {
      return new getItemHistory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TWalletLogGetHistory getSuccess() {
      return this.success;
    }

    public getItemHistory_result setSuccess(TWalletLogGetHistory success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TWalletLogGetHistory)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getItemHistory_result)
        return this.equals((getItemHistory_result)that);
      return false;
    }

    public boolean equals(getItemHistory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getItemHistory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getItemHistory_result typedOther = (getItemHistory_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getItemHistory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getItemHistory_resultStandardSchemeFactory implements SchemeFactory {
      public getItemHistory_resultStandardScheme getScheme() {
        return new getItemHistory_resultStandardScheme();
      }
    }

    private static class getItemHistory_resultStandardScheme extends StandardScheme<getItemHistory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getItemHistory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TWalletLogGetHistory();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getItemHistory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getItemHistory_resultTupleSchemeFactory implements SchemeFactory {
      public getItemHistory_resultTupleScheme getScheme() {
        return new getItemHistory_resultTupleScheme();
      }
    }

    private static class getItemHistory_resultTupleScheme extends TupleScheme<getItemHistory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getItemHistory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getItemHistory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TWalletLogGetHistory();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getItemStatus_args implements org.apache.thrift.TBase<getItemStatus_args, getItemStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getItemStatus_args");

    private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverID", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ROLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleID", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemID", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getItemStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getItemStatus_argsTupleSchemeFactory());
    }

    public String gameID; // required
    public String userID; // required
    public String serverID; // required
    public String roleID; // required
    public String itemID; // required
    public long timestamp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GAME_ID((short)1, "gameID"),
      USER_ID((short)2, "userID"),
      SERVER_ID((short)3, "serverID"),
      ROLE_ID((short)4, "roleID"),
      ITEM_ID((short)5, "itemID"),
      TIMESTAMP((short)6, "timestamp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GAME_ID
            return GAME_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // SERVER_ID
            return SERVER_ID;
          case 4: // ROLE_ID
            return ROLE_ID;
          case 5: // ITEM_ID
            return ITEM_ID;
          case 6: // TIMESTAMP
            return TIMESTAMP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMESTAMP_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROLE_ID, new org.apache.thrift.meta_data.FieldMetaData("roleID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getItemStatus_args.class, metaDataMap);
    }

    public getItemStatus_args() {
    }

    public getItemStatus_args(
      String gameID,
      String userID,
      String serverID,
      String roleID,
      String itemID,
      long timestamp)
    {
      this();
      this.gameID = gameID;
      this.userID = userID;
      this.serverID = serverID;
      this.roleID = roleID;
      this.itemID = itemID;
      this.timestamp = timestamp;
      setTimestampIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getItemStatus_args(getItemStatus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetGameID()) {
        this.gameID = other.gameID;
      }
      if (other.isSetUserID()) {
        this.userID = other.userID;
      }
      if (other.isSetServerID()) {
        this.serverID = other.serverID;
      }
      if (other.isSetRoleID()) {
        this.roleID = other.roleID;
      }
      if (other.isSetItemID()) {
        this.itemID = other.itemID;
      }
      this.timestamp = other.timestamp;
    }

    public getItemStatus_args deepCopy() {
      return new getItemStatus_args(this);
    }

    @Override
    public void clear() {
      this.gameID = null;
      this.userID = null;
      this.serverID = null;
      this.roleID = null;
      this.itemID = null;
      setTimestampIsSet(false);
      this.timestamp = 0;
    }

    public String getGameID() {
      return this.gameID;
    }

    public getItemStatus_args setGameID(String gameID) {
      this.gameID = gameID;
      return this;
    }

    public void unsetGameID() {
      this.gameID = null;
    }

    /** Returns true if field gameID is set (has been assigned a value) and false otherwise */
    public boolean isSetGameID() {
      return this.gameID != null;
    }

    public void setGameIDIsSet(boolean value) {
      if (!value) {
        this.gameID = null;
      }
    }

    public String getUserID() {
      return this.userID;
    }

    public getItemStatus_args setUserID(String userID) {
      this.userID = userID;
      return this;
    }

    public void unsetUserID() {
      this.userID = null;
    }

    /** Returns true if field userID is set (has been assigned a value) and false otherwise */
    public boolean isSetUserID() {
      return this.userID != null;
    }

    public void setUserIDIsSet(boolean value) {
      if (!value) {
        this.userID = null;
      }
    }

    public String getServerID() {
      return this.serverID;
    }

    public getItemStatus_args setServerID(String serverID) {
      this.serverID = serverID;
      return this;
    }

    public void unsetServerID() {
      this.serverID = null;
    }

    /** Returns true if field serverID is set (has been assigned a value) and false otherwise */
    public boolean isSetServerID() {
      return this.serverID != null;
    }

    public void setServerIDIsSet(boolean value) {
      if (!value) {
        this.serverID = null;
      }
    }

    public String getRoleID() {
      return this.roleID;
    }

    public getItemStatus_args setRoleID(String roleID) {
      this.roleID = roleID;
      return this;
    }

    public void unsetRoleID() {
      this.roleID = null;
    }

    /** Returns true if field roleID is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleID() {
      return this.roleID != null;
    }

    public void setRoleIDIsSet(boolean value) {
      if (!value) {
        this.roleID = null;
      }
    }

    public String getItemID() {
      return this.itemID;
    }

    public getItemStatus_args setItemID(String itemID) {
      this.itemID = itemID;
      return this;
    }

    public void unsetItemID() {
      this.itemID = null;
    }

    /** Returns true if field itemID is set (has been assigned a value) and false otherwise */
    public boolean isSetItemID() {
      return this.itemID != null;
    }

    public void setItemIDIsSet(boolean value) {
      if (!value) {
        this.itemID = null;
      }
    }

    public long getTimestamp() {
      return this.timestamp;
    }

    public getItemStatus_args setTimestamp(long timestamp) {
      this.timestamp = timestamp;
      setTimestampIsSet(true);
      return this;
    }

    public void unsetTimestamp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    public void setTimestampIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GAME_ID:
        if (value == null) {
          unsetGameID();
        } else {
          setGameID((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserID();
        } else {
          setUserID((String)value);
        }
        break;

      case SERVER_ID:
        if (value == null) {
          unsetServerID();
        } else {
          setServerID((String)value);
        }
        break;

      case ROLE_ID:
        if (value == null) {
          unsetRoleID();
        } else {
          setRoleID((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItemID();
        } else {
          setItemID((String)value);
        }
        break;

      case TIMESTAMP:
        if (value == null) {
          unsetTimestamp();
        } else {
          setTimestamp((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GAME_ID:
        return getGameID();

      case USER_ID:
        return getUserID();

      case SERVER_ID:
        return getServerID();

      case ROLE_ID:
        return getRoleID();

      case ITEM_ID:
        return getItemID();

      case TIMESTAMP:
        return Long.valueOf(getTimestamp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GAME_ID:
        return isSetGameID();
      case USER_ID:
        return isSetUserID();
      case SERVER_ID:
        return isSetServerID();
      case ROLE_ID:
        return isSetRoleID();
      case ITEM_ID:
        return isSetItemID();
      case TIMESTAMP:
        return isSetTimestamp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getItemStatus_args)
        return this.equals((getItemStatus_args)that);
      return false;
    }

    public boolean equals(getItemStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_gameID = true && this.isSetGameID();
      boolean that_present_gameID = true && that.isSetGameID();
      if (this_present_gameID || that_present_gameID) {
        if (!(this_present_gameID && that_present_gameID))
          return false;
        if (!this.gameID.equals(that.gameID))
          return false;
      }

      boolean this_present_userID = true && this.isSetUserID();
      boolean that_present_userID = true && that.isSetUserID();
      if (this_present_userID || that_present_userID) {
        if (!(this_present_userID && that_present_userID))
          return false;
        if (!this.userID.equals(that.userID))
          return false;
      }

      boolean this_present_serverID = true && this.isSetServerID();
      boolean that_present_serverID = true && that.isSetServerID();
      if (this_present_serverID || that_present_serverID) {
        if (!(this_present_serverID && that_present_serverID))
          return false;
        if (!this.serverID.equals(that.serverID))
          return false;
      }

      boolean this_present_roleID = true && this.isSetRoleID();
      boolean that_present_roleID = true && that.isSetRoleID();
      if (this_present_roleID || that_present_roleID) {
        if (!(this_present_roleID && that_present_roleID))
          return false;
        if (!this.roleID.equals(that.roleID))
          return false;
      }

      boolean this_present_itemID = true && this.isSetItemID();
      boolean that_present_itemID = true && that.isSetItemID();
      if (this_present_itemID || that_present_itemID) {
        if (!(this_present_itemID && that_present_itemID))
          return false;
        if (!this.itemID.equals(that.itemID))
          return false;
      }

      boolean this_present_timestamp = true;
      boolean that_present_timestamp = true;
      if (this_present_timestamp || that_present_timestamp) {
        if (!(this_present_timestamp && that_present_timestamp))
          return false;
        if (this.timestamp != that.timestamp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getItemStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getItemStatus_args typedOther = (getItemStatus_args)other;

      lastComparison = Boolean.valueOf(isSetGameID()).compareTo(typedOther.isSetGameID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameID, typedOther.gameID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, typedOther.userID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerID()).compareTo(typedOther.isSetServerID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverID, typedOther.serverID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRoleID()).compareTo(typedOther.isSetRoleID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleID, typedOther.roleID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemID()).compareTo(typedOther.isSetItemID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemID, typedOther.itemID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getItemStatus_args(");
      boolean first = true;

      sb.append("gameID:");
      if (this.gameID == null) {
        sb.append("null");
      } else {
        sb.append(this.gameID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userID:");
      if (this.userID == null) {
        sb.append("null");
      } else {
        sb.append(this.userID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverID:");
      if (this.serverID == null) {
        sb.append("null");
      } else {
        sb.append(this.serverID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roleID:");
      if (this.roleID == null) {
        sb.append("null");
      } else {
        sb.append(this.roleID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemID:");
      if (this.itemID == null) {
        sb.append("null");
      } else {
        sb.append(this.itemID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getItemStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getItemStatus_argsStandardScheme getScheme() {
        return new getItemStatus_argsStandardScheme();
      }
    }

    private static class getItemStatus_argsStandardScheme extends StandardScheme<getItemStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getItemStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GAME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gameID = iprot.readString();
                struct.setGameIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userID = iprot.readString();
                struct.setUserIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serverID = iprot.readString();
                struct.setServerIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ROLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roleID = iprot.readString();
                struct.setRoleIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.itemID = iprot.readString();
                struct.setItemIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.timestamp = iprot.readI64();
                struct.setTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getItemStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gameID != null) {
          oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
          oprot.writeString(struct.gameID);
          oprot.writeFieldEnd();
        }
        if (struct.userID != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userID);
          oprot.writeFieldEnd();
        }
        if (struct.serverID != null) {
          oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
          oprot.writeString(struct.serverID);
          oprot.writeFieldEnd();
        }
        if (struct.roleID != null) {
          oprot.writeFieldBegin(ROLE_ID_FIELD_DESC);
          oprot.writeString(struct.roleID);
          oprot.writeFieldEnd();
        }
        if (struct.itemID != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.itemID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getItemStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getItemStatus_argsTupleScheme getScheme() {
        return new getItemStatus_argsTupleScheme();
      }
    }

    private static class getItemStatus_argsTupleScheme extends TupleScheme<getItemStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getItemStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGameID()) {
          optionals.set(0);
        }
        if (struct.isSetUserID()) {
          optionals.set(1);
        }
        if (struct.isSetServerID()) {
          optionals.set(2);
        }
        if (struct.isSetRoleID()) {
          optionals.set(3);
        }
        if (struct.isSetItemID()) {
          optionals.set(4);
        }
        if (struct.isSetTimestamp()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetGameID()) {
          oprot.writeString(struct.gameID);
        }
        if (struct.isSetUserID()) {
          oprot.writeString(struct.userID);
        }
        if (struct.isSetServerID()) {
          oprot.writeString(struct.serverID);
        }
        if (struct.isSetRoleID()) {
          oprot.writeString(struct.roleID);
        }
        if (struct.isSetItemID()) {
          oprot.writeString(struct.itemID);
        }
        if (struct.isSetTimestamp()) {
          oprot.writeI64(struct.timestamp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getItemStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.gameID = iprot.readString();
          struct.setGameIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userID = iprot.readString();
          struct.setUserIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.serverID = iprot.readString();
          struct.setServerIDIsSet(true);
        }
        if (incoming.get(3)) {
          struct.roleID = iprot.readString();
          struct.setRoleIDIsSet(true);
        }
        if (incoming.get(4)) {
          struct.itemID = iprot.readString();
          struct.setItemIDIsSet(true);
        }
        if (incoming.get(5)) {
          struct.timestamp = iprot.readI64();
          struct.setTimestampIsSet(true);
        }
      }
    }

  }

  public static class getItemStatus_result implements org.apache.thrift.TBase<getItemStatus_result, getItemStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getItemStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getItemStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getItemStatus_resultTupleSchemeFactory());
    }

    public TWalletLogGetStatus success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TWalletLogGetStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getItemStatus_result.class, metaDataMap);
    }

    public getItemStatus_result() {
    }

    public getItemStatus_result(
      TWalletLogGetStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getItemStatus_result(getItemStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new TWalletLogGetStatus(other.success);
      }
    }

    public getItemStatus_result deepCopy() {
      return new getItemStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TWalletLogGetStatus getSuccess() {
      return this.success;
    }

    public getItemStatus_result setSuccess(TWalletLogGetStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TWalletLogGetStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getItemStatus_result)
        return this.equals((getItemStatus_result)that);
      return false;
    }

    public boolean equals(getItemStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getItemStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getItemStatus_result typedOther = (getItemStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getItemStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getItemStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getItemStatus_resultStandardScheme getScheme() {
        return new getItemStatus_resultStandardScheme();
      }
    }

    private static class getItemStatus_resultStandardScheme extends StandardScheme<getItemStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getItemStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TWalletLogGetStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getItemStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getItemStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getItemStatus_resultTupleScheme getScheme() {
        return new getItemStatus_resultTupleScheme();
      }
    }

    private static class getItemStatus_resultTupleScheme extends TupleScheme<getItemStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getItemStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getItemStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TWalletLogGetStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
