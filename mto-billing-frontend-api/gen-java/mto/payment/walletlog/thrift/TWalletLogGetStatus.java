/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package mto.payment.walletlog.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TWalletLogGetStatus implements org.apache.thrift.TBase<TWalletLogGetStatus, TWalletLogGetStatus._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TWalletLogGetStatus");

  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ITEM_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("itemInfo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OPEN_TS_FIELD_DESC = new org.apache.thrift.protocol.TField("openTs", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField AVAILABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("available", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField PREVIOUS_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("previousItem", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TWalletLogGetStatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TWalletLogGetStatusTupleSchemeFactory());
  }

  /**
   * 
   * @see TReturnCode
   */
  public TReturnCode code; // required
  public String itemInfo; // required
  public long openTs; // required
  public boolean available; // required
  public String previousItem; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TReturnCode
     */
    CODE((short)1, "code"),
    ITEM_INFO((short)2, "itemInfo"),
    OPEN_TS((short)3, "openTs"),
    AVAILABLE((short)4, "available"),
    PREVIOUS_ITEM((short)5, "previousItem");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CODE
          return CODE;
        case 2: // ITEM_INFO
          return ITEM_INFO;
        case 3: // OPEN_TS
          return OPEN_TS;
        case 4: // AVAILABLE
          return AVAILABLE;
        case 5: // PREVIOUS_ITEM
          return PREVIOUS_ITEM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OPENTS_ISSET_ID = 0;
  private static final int __AVAILABLE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TReturnCode.class)));
    tmpMap.put(_Fields.ITEM_INFO, new org.apache.thrift.meta_data.FieldMetaData("itemInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPEN_TS, new org.apache.thrift.meta_data.FieldMetaData("openTs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AVAILABLE, new org.apache.thrift.meta_data.FieldMetaData("available", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PREVIOUS_ITEM, new org.apache.thrift.meta_data.FieldMetaData("previousItem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TWalletLogGetStatus.class, metaDataMap);
  }

  public TWalletLogGetStatus() {
  }

  public TWalletLogGetStatus(
    TReturnCode code,
    String itemInfo,
    long openTs,
    boolean available,
    String previousItem)
  {
    this();
    this.code = code;
    this.itemInfo = itemInfo;
    this.openTs = openTs;
    setOpenTsIsSet(true);
    this.available = available;
    setAvailableIsSet(true);
    this.previousItem = previousItem;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TWalletLogGetStatus(TWalletLogGetStatus other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCode()) {
      this.code = other.code;
    }
    if (other.isSetItemInfo()) {
      this.itemInfo = other.itemInfo;
    }
    this.openTs = other.openTs;
    this.available = other.available;
    if (other.isSetPreviousItem()) {
      this.previousItem = other.previousItem;
    }
  }

  public TWalletLogGetStatus deepCopy() {
    return new TWalletLogGetStatus(this);
  }

  @Override
  public void clear() {
    this.code = null;
    this.itemInfo = null;
    setOpenTsIsSet(false);
    this.openTs = 0;
    setAvailableIsSet(false);
    this.available = false;
    this.previousItem = null;
  }

  /**
   * 
   * @see TReturnCode
   */
  public TReturnCode getCode() {
    return this.code;
  }

  /**
   * 
   * @see TReturnCode
   */
  public TWalletLogGetStatus setCode(TReturnCode code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public String getItemInfo() {
    return this.itemInfo;
  }

  public TWalletLogGetStatus setItemInfo(String itemInfo) {
    this.itemInfo = itemInfo;
    return this;
  }

  public void unsetItemInfo() {
    this.itemInfo = null;
  }

  /** Returns true if field itemInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetItemInfo() {
    return this.itemInfo != null;
  }

  public void setItemInfoIsSet(boolean value) {
    if (!value) {
      this.itemInfo = null;
    }
  }

  public long getOpenTs() {
    return this.openTs;
  }

  public TWalletLogGetStatus setOpenTs(long openTs) {
    this.openTs = openTs;
    setOpenTsIsSet(true);
    return this;
  }

  public void unsetOpenTs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENTS_ISSET_ID);
  }

  /** Returns true if field openTs is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenTs() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENTS_ISSET_ID);
  }

  public void setOpenTsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENTS_ISSET_ID, value);
  }

  public boolean isAvailable() {
    return this.available;
  }

  public TWalletLogGetStatus setAvailable(boolean available) {
    this.available = available;
    setAvailableIsSet(true);
    return this;
  }

  public void unsetAvailable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVAILABLE_ISSET_ID);
  }

  /** Returns true if field available is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailable() {
    return EncodingUtils.testBit(__isset_bitfield, __AVAILABLE_ISSET_ID);
  }

  public void setAvailableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVAILABLE_ISSET_ID, value);
  }

  public String getPreviousItem() {
    return this.previousItem;
  }

  public TWalletLogGetStatus setPreviousItem(String previousItem) {
    this.previousItem = previousItem;
    return this;
  }

  public void unsetPreviousItem() {
    this.previousItem = null;
  }

  /** Returns true if field previousItem is set (has been assigned a value) and false otherwise */
  public boolean isSetPreviousItem() {
    return this.previousItem != null;
  }

  public void setPreviousItemIsSet(boolean value) {
    if (!value) {
      this.previousItem = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((TReturnCode)value);
      }
      break;

    case ITEM_INFO:
      if (value == null) {
        unsetItemInfo();
      } else {
        setItemInfo((String)value);
      }
      break;

    case OPEN_TS:
      if (value == null) {
        unsetOpenTs();
      } else {
        setOpenTs((Long)value);
      }
      break;

    case AVAILABLE:
      if (value == null) {
        unsetAvailable();
      } else {
        setAvailable((Boolean)value);
      }
      break;

    case PREVIOUS_ITEM:
      if (value == null) {
        unsetPreviousItem();
      } else {
        setPreviousItem((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CODE:
      return getCode();

    case ITEM_INFO:
      return getItemInfo();

    case OPEN_TS:
      return Long.valueOf(getOpenTs());

    case AVAILABLE:
      return Boolean.valueOf(isAvailable());

    case PREVIOUS_ITEM:
      return getPreviousItem();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CODE:
      return isSetCode();
    case ITEM_INFO:
      return isSetItemInfo();
    case OPEN_TS:
      return isSetOpenTs();
    case AVAILABLE:
      return isSetAvailable();
    case PREVIOUS_ITEM:
      return isSetPreviousItem();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TWalletLogGetStatus)
      return this.equals((TWalletLogGetStatus)that);
    return false;
  }

  public boolean equals(TWalletLogGetStatus that) {
    if (that == null)
      return false;

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_itemInfo = true && this.isSetItemInfo();
    boolean that_present_itemInfo = true && that.isSetItemInfo();
    if (this_present_itemInfo || that_present_itemInfo) {
      if (!(this_present_itemInfo && that_present_itemInfo))
        return false;
      if (!this.itemInfo.equals(that.itemInfo))
        return false;
    }

    boolean this_present_openTs = true;
    boolean that_present_openTs = true;
    if (this_present_openTs || that_present_openTs) {
      if (!(this_present_openTs && that_present_openTs))
        return false;
      if (this.openTs != that.openTs)
        return false;
    }

    boolean this_present_available = true;
    boolean that_present_available = true;
    if (this_present_available || that_present_available) {
      if (!(this_present_available && that_present_available))
        return false;
      if (this.available != that.available)
        return false;
    }

    boolean this_present_previousItem = true && this.isSetPreviousItem();
    boolean that_present_previousItem = true && that.isSetPreviousItem();
    if (this_present_previousItem || that_present_previousItem) {
      if (!(this_present_previousItem && that_present_previousItem))
        return false;
      if (!this.previousItem.equals(that.previousItem))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TWalletLogGetStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TWalletLogGetStatus typedOther = (TWalletLogGetStatus)other;

    lastComparison = Boolean.valueOf(isSetCode()).compareTo(typedOther.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, typedOther.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemInfo()).compareTo(typedOther.isSetItemInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemInfo, typedOther.itemInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenTs()).compareTo(typedOther.isSetOpenTs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenTs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openTs, typedOther.openTs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailable()).compareTo(typedOther.isSetAvailable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.available, typedOther.available);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreviousItem()).compareTo(typedOther.isSetPreviousItem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreviousItem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.previousItem, typedOther.previousItem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TWalletLogGetStatus(");
    boolean first = true;

    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemInfo:");
    if (this.itemInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.itemInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("openTs:");
    sb.append(this.openTs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("available:");
    sb.append(this.available);
    first = false;
    if (!first) sb.append(", ");
    sb.append("previousItem:");
    if (this.previousItem == null) {
      sb.append("null");
    } else {
      sb.append(this.previousItem);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TWalletLogGetStatusStandardSchemeFactory implements SchemeFactory {
    public TWalletLogGetStatusStandardScheme getScheme() {
      return new TWalletLogGetStatusStandardScheme();
    }
  }

  private static class TWalletLogGetStatusStandardScheme extends StandardScheme<TWalletLogGetStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TWalletLogGetStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.code = TReturnCode.findByValue(iprot.readI32());
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ITEM_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemInfo = iprot.readString();
              struct.setItemInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OPEN_TS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.openTs = iprot.readI64();
              struct.setOpenTsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AVAILABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.available = iprot.readBool();
              struct.setAvailableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PREVIOUS_ITEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.previousItem = iprot.readString();
              struct.setPreviousItemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TWalletLogGetStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.code != null) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeI32(struct.code.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.itemInfo != null) {
        oprot.writeFieldBegin(ITEM_INFO_FIELD_DESC);
        oprot.writeString(struct.itemInfo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OPEN_TS_FIELD_DESC);
      oprot.writeI64(struct.openTs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVAILABLE_FIELD_DESC);
      oprot.writeBool(struct.available);
      oprot.writeFieldEnd();
      if (struct.previousItem != null) {
        oprot.writeFieldBegin(PREVIOUS_ITEM_FIELD_DESC);
        oprot.writeString(struct.previousItem);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TWalletLogGetStatusTupleSchemeFactory implements SchemeFactory {
    public TWalletLogGetStatusTupleScheme getScheme() {
      return new TWalletLogGetStatusTupleScheme();
    }
  }

  private static class TWalletLogGetStatusTupleScheme extends TupleScheme<TWalletLogGetStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TWalletLogGetStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCode()) {
        optionals.set(0);
      }
      if (struct.isSetItemInfo()) {
        optionals.set(1);
      }
      if (struct.isSetOpenTs()) {
        optionals.set(2);
      }
      if (struct.isSetAvailable()) {
        optionals.set(3);
      }
      if (struct.isSetPreviousItem()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetCode()) {
        oprot.writeI32(struct.code.getValue());
      }
      if (struct.isSetItemInfo()) {
        oprot.writeString(struct.itemInfo);
      }
      if (struct.isSetOpenTs()) {
        oprot.writeI64(struct.openTs);
      }
      if (struct.isSetAvailable()) {
        oprot.writeBool(struct.available);
      }
      if (struct.isSetPreviousItem()) {
        oprot.writeString(struct.previousItem);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TWalletLogGetStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.code = TReturnCode.findByValue(iprot.readI32());
        struct.setCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.itemInfo = iprot.readString();
        struct.setItemInfoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.openTs = iprot.readI64();
        struct.setOpenTsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.available = iprot.readBool();
        struct.setAvailableIsSet(true);
      }
      if (incoming.get(4)) {
        struct.previousItem = iprot.readString();
        struct.setPreviousItemIsSet(true);
      }
    }
  }

}

