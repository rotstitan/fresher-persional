/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package mto.payment.walletlog.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TWalletHistory implements org.apache.thrift.TBase<TWalletHistory, TWalletHistory._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TWalletHistory");

  private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ROLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField GAMERESULT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("gameresultCode", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField EXPIRED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("expiredTime", org.apache.thrift.protocol.TType.I64, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TWalletHistoryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TWalletHistoryTupleSchemeFactory());
  }

  public String gameID; // required
  public String userID; // required
  public String serverID; // required
  public String roleID; // required
  public String itemID; // required
  public long updateTime; // required
  public long gameresultCode; // required
  public long expiredTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GAME_ID((short)1, "gameID"),
    USER_ID((short)2, "userID"),
    SERVER_ID((short)3, "serverID"),
    ROLE_ID((short)4, "roleID"),
    ITEM_ID((short)5, "itemID"),
    UPDATE_TIME((short)6, "updateTime"),
    GAMERESULT_CODE((short)7, "gameresultCode"),
    EXPIRED_TIME((short)8, "expiredTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GAME_ID
          return GAME_ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // SERVER_ID
          return SERVER_ID;
        case 4: // ROLE_ID
          return ROLE_ID;
        case 5: // ITEM_ID
          return ITEM_ID;
        case 6: // UPDATE_TIME
          return UPDATE_TIME;
        case 7: // GAMERESULT_CODE
          return GAMERESULT_CODE;
        case 8: // EXPIRED_TIME
          return EXPIRED_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UPDATETIME_ISSET_ID = 0;
  private static final int __GAMERESULTCODE_ISSET_ID = 1;
  private static final int __EXPIREDTIME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLE_ID, new org.apache.thrift.meta_data.FieldMetaData("roleID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GAMERESULT_CODE, new org.apache.thrift.meta_data.FieldMetaData("gameresultCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXPIRED_TIME, new org.apache.thrift.meta_data.FieldMetaData("expiredTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TWalletHistory.class, metaDataMap);
  }

  public TWalletHistory() {
  }

  public TWalletHistory(
    String gameID,
    String userID,
    String serverID,
    String roleID,
    String itemID,
    long updateTime,
    long gameresultCode,
    long expiredTime)
  {
    this();
    this.gameID = gameID;
    this.userID = userID;
    this.serverID = serverID;
    this.roleID = roleID;
    this.itemID = itemID;
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.gameresultCode = gameresultCode;
    setGameresultCodeIsSet(true);
    this.expiredTime = expiredTime;
    setExpiredTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TWalletHistory(TWalletHistory other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGameID()) {
      this.gameID = other.gameID;
    }
    if (other.isSetUserID()) {
      this.userID = other.userID;
    }
    if (other.isSetServerID()) {
      this.serverID = other.serverID;
    }
    if (other.isSetRoleID()) {
      this.roleID = other.roleID;
    }
    if (other.isSetItemID()) {
      this.itemID = other.itemID;
    }
    this.updateTime = other.updateTime;
    this.gameresultCode = other.gameresultCode;
    this.expiredTime = other.expiredTime;
  }

  public TWalletHistory deepCopy() {
    return new TWalletHistory(this);
  }

  @Override
  public void clear() {
    this.gameID = null;
    this.userID = null;
    this.serverID = null;
    this.roleID = null;
    this.itemID = null;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    setGameresultCodeIsSet(false);
    this.gameresultCode = 0;
    setExpiredTimeIsSet(false);
    this.expiredTime = 0;
  }

  public String getGameID() {
    return this.gameID;
  }

  public TWalletHistory setGameID(String gameID) {
    this.gameID = gameID;
    return this;
  }

  public void unsetGameID() {
    this.gameID = null;
  }

  /** Returns true if field gameID is set (has been assigned a value) and false otherwise */
  public boolean isSetGameID() {
    return this.gameID != null;
  }

  public void setGameIDIsSet(boolean value) {
    if (!value) {
      this.gameID = null;
    }
  }

  public String getUserID() {
    return this.userID;
  }

  public TWalletHistory setUserID(String userID) {
    this.userID = userID;
    return this;
  }

  public void unsetUserID() {
    this.userID = null;
  }

  /** Returns true if field userID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserID() {
    return this.userID != null;
  }

  public void setUserIDIsSet(boolean value) {
    if (!value) {
      this.userID = null;
    }
  }

  public String getServerID() {
    return this.serverID;
  }

  public TWalletHistory setServerID(String serverID) {
    this.serverID = serverID;
    return this;
  }

  public void unsetServerID() {
    this.serverID = null;
  }

  /** Returns true if field serverID is set (has been assigned a value) and false otherwise */
  public boolean isSetServerID() {
    return this.serverID != null;
  }

  public void setServerIDIsSet(boolean value) {
    if (!value) {
      this.serverID = null;
    }
  }

  public String getRoleID() {
    return this.roleID;
  }

  public TWalletHistory setRoleID(String roleID) {
    this.roleID = roleID;
    return this;
  }

  public void unsetRoleID() {
    this.roleID = null;
  }

  /** Returns true if field roleID is set (has been assigned a value) and false otherwise */
  public boolean isSetRoleID() {
    return this.roleID != null;
  }

  public void setRoleIDIsSet(boolean value) {
    if (!value) {
      this.roleID = null;
    }
  }

  public String getItemID() {
    return this.itemID;
  }

  public TWalletHistory setItemID(String itemID) {
    this.itemID = itemID;
    return this;
  }

  public void unsetItemID() {
    this.itemID = null;
  }

  /** Returns true if field itemID is set (has been assigned a value) and false otherwise */
  public boolean isSetItemID() {
    return this.itemID != null;
  }

  public void setItemIDIsSet(boolean value) {
    if (!value) {
      this.itemID = null;
    }
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public TWalletHistory setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public long getGameresultCode() {
    return this.gameresultCode;
  }

  public TWalletHistory setGameresultCode(long gameresultCode) {
    this.gameresultCode = gameresultCode;
    setGameresultCodeIsSet(true);
    return this;
  }

  public void unsetGameresultCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMERESULTCODE_ISSET_ID);
  }

  /** Returns true if field gameresultCode is set (has been assigned a value) and false otherwise */
  public boolean isSetGameresultCode() {
    return EncodingUtils.testBit(__isset_bitfield, __GAMERESULTCODE_ISSET_ID);
  }

  public void setGameresultCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMERESULTCODE_ISSET_ID, value);
  }

  public long getExpiredTime() {
    return this.expiredTime;
  }

  public TWalletHistory setExpiredTime(long expiredTime) {
    this.expiredTime = expiredTime;
    setExpiredTimeIsSet(true);
    return this;
  }

  public void unsetExpiredTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIREDTIME_ISSET_ID);
  }

  /** Returns true if field expiredTime is set (has been assigned a value) and false otherwise */
  public boolean isSetExpiredTime() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIREDTIME_ISSET_ID);
  }

  public void setExpiredTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIREDTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GAME_ID:
      if (value == null) {
        unsetGameID();
      } else {
        setGameID((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((String)value);
      }
      break;

    case SERVER_ID:
      if (value == null) {
        unsetServerID();
      } else {
        setServerID((String)value);
      }
      break;

    case ROLE_ID:
      if (value == null) {
        unsetRoleID();
      } else {
        setRoleID((String)value);
      }
      break;

    case ITEM_ID:
      if (value == null) {
        unsetItemID();
      } else {
        setItemID((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case GAMERESULT_CODE:
      if (value == null) {
        unsetGameresultCode();
      } else {
        setGameresultCode((Long)value);
      }
      break;

    case EXPIRED_TIME:
      if (value == null) {
        unsetExpiredTime();
      } else {
        setExpiredTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GAME_ID:
      return getGameID();

    case USER_ID:
      return getUserID();

    case SERVER_ID:
      return getServerID();

    case ROLE_ID:
      return getRoleID();

    case ITEM_ID:
      return getItemID();

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    case GAMERESULT_CODE:
      return Long.valueOf(getGameresultCode());

    case EXPIRED_TIME:
      return Long.valueOf(getExpiredTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GAME_ID:
      return isSetGameID();
    case USER_ID:
      return isSetUserID();
    case SERVER_ID:
      return isSetServerID();
    case ROLE_ID:
      return isSetRoleID();
    case ITEM_ID:
      return isSetItemID();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case GAMERESULT_CODE:
      return isSetGameresultCode();
    case EXPIRED_TIME:
      return isSetExpiredTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TWalletHistory)
      return this.equals((TWalletHistory)that);
    return false;
  }

  public boolean equals(TWalletHistory that) {
    if (that == null)
      return false;

    boolean this_present_gameID = true && this.isSetGameID();
    boolean that_present_gameID = true && that.isSetGameID();
    if (this_present_gameID || that_present_gameID) {
      if (!(this_present_gameID && that_present_gameID))
        return false;
      if (!this.gameID.equals(that.gameID))
        return false;
    }

    boolean this_present_userID = true && this.isSetUserID();
    boolean that_present_userID = true && that.isSetUserID();
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (!this.userID.equals(that.userID))
        return false;
    }

    boolean this_present_serverID = true && this.isSetServerID();
    boolean that_present_serverID = true && that.isSetServerID();
    if (this_present_serverID || that_present_serverID) {
      if (!(this_present_serverID && that_present_serverID))
        return false;
      if (!this.serverID.equals(that.serverID))
        return false;
    }

    boolean this_present_roleID = true && this.isSetRoleID();
    boolean that_present_roleID = true && that.isSetRoleID();
    if (this_present_roleID || that_present_roleID) {
      if (!(this_present_roleID && that_present_roleID))
        return false;
      if (!this.roleID.equals(that.roleID))
        return false;
    }

    boolean this_present_itemID = true && this.isSetItemID();
    boolean that_present_itemID = true && that.isSetItemID();
    if (this_present_itemID || that_present_itemID) {
      if (!(this_present_itemID && that_present_itemID))
        return false;
      if (!this.itemID.equals(that.itemID))
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_gameresultCode = true;
    boolean that_present_gameresultCode = true;
    if (this_present_gameresultCode || that_present_gameresultCode) {
      if (!(this_present_gameresultCode && that_present_gameresultCode))
        return false;
      if (this.gameresultCode != that.gameresultCode)
        return false;
    }

    boolean this_present_expiredTime = true;
    boolean that_present_expiredTime = true;
    if (this_present_expiredTime || that_present_expiredTime) {
      if (!(this_present_expiredTime && that_present_expiredTime))
        return false;
      if (this.expiredTime != that.expiredTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TWalletHistory other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TWalletHistory typedOther = (TWalletHistory)other;

    lastComparison = Boolean.valueOf(isSetGameID()).compareTo(typedOther.isSetGameID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameID, typedOther.gameID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, typedOther.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerID()).compareTo(typedOther.isSetServerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverID, typedOther.serverID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoleID()).compareTo(typedOther.isSetRoleID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoleID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleID, typedOther.roleID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemID()).compareTo(typedOther.isSetItemID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemID, typedOther.itemID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameresultCode()).compareTo(typedOther.isSetGameresultCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameresultCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameresultCode, typedOther.gameresultCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpiredTime()).compareTo(typedOther.isSetExpiredTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpiredTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expiredTime, typedOther.expiredTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TWalletHistory(");
    boolean first = true;

    sb.append("gameID:");
    if (this.gameID == null) {
      sb.append("null");
    } else {
      sb.append(this.gameID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userID:");
    if (this.userID == null) {
      sb.append("null");
    } else {
      sb.append(this.userID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverID:");
    if (this.serverID == null) {
      sb.append("null");
    } else {
      sb.append(this.serverID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("roleID:");
    if (this.roleID == null) {
      sb.append("null");
    } else {
      sb.append(this.roleID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemID:");
    if (this.itemID == null) {
      sb.append("null");
    } else {
      sb.append(this.itemID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gameresultCode:");
    sb.append(this.gameresultCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("expiredTime:");
    sb.append(this.expiredTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TWalletHistoryStandardSchemeFactory implements SchemeFactory {
    public TWalletHistoryStandardScheme getScheme() {
      return new TWalletHistoryStandardScheme();
    }
  }

  private static class TWalletHistoryStandardScheme extends StandardScheme<TWalletHistory> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TWalletHistory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GAME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gameID = iprot.readString();
              struct.setGameIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userID = iprot.readString();
              struct.setUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SERVER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverID = iprot.readString();
              struct.setServerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.roleID = iprot.readString();
              struct.setRoleIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemID = iprot.readString();
              struct.setItemIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GAMERESULT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gameresultCode = iprot.readI64();
              struct.setGameresultCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXPIRED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expiredTime = iprot.readI64();
              struct.setExpiredTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TWalletHistory struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.gameID != null) {
        oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
        oprot.writeString(struct.gameID);
        oprot.writeFieldEnd();
      }
      if (struct.userID != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userID);
        oprot.writeFieldEnd();
      }
      if (struct.serverID != null) {
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeString(struct.serverID);
        oprot.writeFieldEnd();
      }
      if (struct.roleID != null) {
        oprot.writeFieldBegin(ROLE_ID_FIELD_DESC);
        oprot.writeString(struct.roleID);
        oprot.writeFieldEnd();
      }
      if (struct.itemID != null) {
        oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
        oprot.writeString(struct.itemID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GAMERESULT_CODE_FIELD_DESC);
      oprot.writeI64(struct.gameresultCode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXPIRED_TIME_FIELD_DESC);
      oprot.writeI64(struct.expiredTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TWalletHistoryTupleSchemeFactory implements SchemeFactory {
    public TWalletHistoryTupleScheme getScheme() {
      return new TWalletHistoryTupleScheme();
    }
  }

  private static class TWalletHistoryTupleScheme extends TupleScheme<TWalletHistory> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TWalletHistory struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGameID()) {
        optionals.set(0);
      }
      if (struct.isSetUserID()) {
        optionals.set(1);
      }
      if (struct.isSetServerID()) {
        optionals.set(2);
      }
      if (struct.isSetRoleID()) {
        optionals.set(3);
      }
      if (struct.isSetItemID()) {
        optionals.set(4);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(5);
      }
      if (struct.isSetGameresultCode()) {
        optionals.set(6);
      }
      if (struct.isSetExpiredTime()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetGameID()) {
        oprot.writeString(struct.gameID);
      }
      if (struct.isSetUserID()) {
        oprot.writeString(struct.userID);
      }
      if (struct.isSetServerID()) {
        oprot.writeString(struct.serverID);
      }
      if (struct.isSetRoleID()) {
        oprot.writeString(struct.roleID);
      }
      if (struct.isSetItemID()) {
        oprot.writeString(struct.itemID);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetGameresultCode()) {
        oprot.writeI64(struct.gameresultCode);
      }
      if (struct.isSetExpiredTime()) {
        oprot.writeI64(struct.expiredTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TWalletHistory struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.gameID = iprot.readString();
        struct.setGameIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userID = iprot.readString();
        struct.setUserIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.serverID = iprot.readString();
        struct.setServerIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.roleID = iprot.readString();
        struct.setRoleIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.itemID = iprot.readString();
        struct.setItemIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.gameresultCode = iprot.readI64();
        struct.setGameresultCodeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.expiredTime = iprot.readI64();
        struct.setExpiredTimeIsSet(true);
      }
    }
  }

}

