/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package mto.pplogin.web.session.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SessionService {

  public interface Iface {

    public TCheckSessionRCode checkSession(String gameID, String sessionID, String userID, String userAgent) throws org.apache.thrift.TException;

    public TCheckSessionRCode removeSession(String gameID, String sessionID, String userID) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void checkSession(String gameID, String sessionID, String userID, String userAgent, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.checkSession_call> resultHandler) throws org.apache.thrift.TException;

    public void removeSession(String gameID, String sessionID, String userID, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.removeSession_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TCheckSessionRCode checkSession(String gameID, String sessionID, String userID, String userAgent) throws org.apache.thrift.TException
    {
      send_checkSession(gameID, sessionID, userID, userAgent);
      return recv_checkSession();
    }

    public void send_checkSession(String gameID, String sessionID, String userID, String userAgent) throws org.apache.thrift.TException
    {
      checkSession_args args = new checkSession_args();
      args.setGameID(gameID);
      args.setSessionID(sessionID);
      args.setUserID(userID);
      args.setUserAgent(userAgent);
      sendBase("checkSession", args);
    }

    public TCheckSessionRCode recv_checkSession() throws org.apache.thrift.TException
    {
      checkSession_result result = new checkSession_result();
      receiveBase(result, "checkSession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkSession failed: unknown result");
    }

    public TCheckSessionRCode removeSession(String gameID, String sessionID, String userID) throws org.apache.thrift.TException
    {
      send_removeSession(gameID, sessionID, userID);
      return recv_removeSession();
    }

    public void send_removeSession(String gameID, String sessionID, String userID) throws org.apache.thrift.TException
    {
      removeSession_args args = new removeSession_args();
      args.setGameID(gameID);
      args.setSessionID(sessionID);
      args.setUserID(userID);
      sendBase("removeSession", args);
    }

    public TCheckSessionRCode recv_removeSession() throws org.apache.thrift.TException
    {
      removeSession_result result = new removeSession_result();
      receiveBase(result, "removeSession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeSession failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void checkSession(String gameID, String sessionID, String userID, String userAgent, org.apache.thrift.async.AsyncMethodCallback<checkSession_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkSession_call method_call = new checkSession_call(gameID, sessionID, userID, userAgent, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkSession_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String gameID;
      private String sessionID;
      private String userID;
      private String userAgent;
      public checkSession_call(String gameID, String sessionID, String userID, String userAgent, org.apache.thrift.async.AsyncMethodCallback<checkSession_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gameID = gameID;
        this.sessionID = sessionID;
        this.userID = userID;
        this.userAgent = userAgent;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkSession_args args = new checkSession_args();
        args.setGameID(gameID);
        args.setSessionID(sessionID);
        args.setUserID(userID);
        args.setUserAgent(userAgent);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TCheckSessionRCode getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkSession();
      }
    }

    public void removeSession(String gameID, String sessionID, String userID, org.apache.thrift.async.AsyncMethodCallback<removeSession_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeSession_call method_call = new removeSession_call(gameID, sessionID, userID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeSession_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String gameID;
      private String sessionID;
      private String userID;
      public removeSession_call(String gameID, String sessionID, String userID, org.apache.thrift.async.AsyncMethodCallback<removeSession_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gameID = gameID;
        this.sessionID = sessionID;
        this.userID = userID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeSession_args args = new removeSession_args();
        args.setGameID(gameID);
        args.setSessionID(sessionID);
        args.setUserID(userID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TCheckSessionRCode getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeSession();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("checkSession", new checkSession());
      processMap.put("removeSession", new removeSession());
      return processMap;
    }

    public static class checkSession<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkSession_args> {
      public checkSession() {
        super("checkSession");
      }

      public checkSession_args getEmptyArgsInstance() {
        return new checkSession_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkSession_result getResult(I iface, checkSession_args args) throws org.apache.thrift.TException {
        checkSession_result result = new checkSession_result();
        result.success = iface.checkSession(args.gameID, args.sessionID, args.userID, args.userAgent);
        return result;
      }
    }

    public static class removeSession<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeSession_args> {
      public removeSession() {
        super("removeSession");
      }

      public removeSession_args getEmptyArgsInstance() {
        return new removeSession_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeSession_result getResult(I iface, removeSession_args args) throws org.apache.thrift.TException {
        removeSession_result result = new removeSession_result();
        result.success = iface.removeSession(args.gameID, args.sessionID, args.userID);
        return result;
      }
    }

  }

  public static class checkSession_args implements org.apache.thrift.TBase<checkSession_args, checkSession_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkSession_args");

    private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField USER_AGENT_FIELD_DESC = new org.apache.thrift.protocol.TField("userAgent", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkSession_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkSession_argsTupleSchemeFactory());
    }

    public String gameID; // required
    public String sessionID; // required
    public String userID; // required
    public String userAgent; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GAME_ID((short)1, "gameID"),
      SESSION_ID((short)2, "sessionID"),
      USER_ID((short)3, "userID"),
      USER_AGENT((short)4, "userAgent");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GAME_ID
            return GAME_ID;
          case 2: // SESSION_ID
            return SESSION_ID;
          case 3: // USER_ID
            return USER_ID;
          case 4: // USER_AGENT
            return USER_AGENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_AGENT, new org.apache.thrift.meta_data.FieldMetaData("userAgent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkSession_args.class, metaDataMap);
    }

    public checkSession_args() {
    }

    public checkSession_args(
      String gameID,
      String sessionID,
      String userID,
      String userAgent)
    {
      this();
      this.gameID = gameID;
      this.sessionID = sessionID;
      this.userID = userID;
      this.userAgent = userAgent;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkSession_args(checkSession_args other) {
      if (other.isSetGameID()) {
        this.gameID = other.gameID;
      }
      if (other.isSetSessionID()) {
        this.sessionID = other.sessionID;
      }
      if (other.isSetUserID()) {
        this.userID = other.userID;
      }
      if (other.isSetUserAgent()) {
        this.userAgent = other.userAgent;
      }
    }

    public checkSession_args deepCopy() {
      return new checkSession_args(this);
    }

    @Override
    public void clear() {
      this.gameID = null;
      this.sessionID = null;
      this.userID = null;
      this.userAgent = null;
    }

    public String getGameID() {
      return this.gameID;
    }

    public checkSession_args setGameID(String gameID) {
      this.gameID = gameID;
      return this;
    }

    public void unsetGameID() {
      this.gameID = null;
    }

    /** Returns true if field gameID is set (has been assigned a value) and false otherwise */
    public boolean isSetGameID() {
      return this.gameID != null;
    }

    public void setGameIDIsSet(boolean value) {
      if (!value) {
        this.gameID = null;
      }
    }

    public String getSessionID() {
      return this.sessionID;
    }

    public checkSession_args setSessionID(String sessionID) {
      this.sessionID = sessionID;
      return this;
    }

    public void unsetSessionID() {
      this.sessionID = null;
    }

    /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionID() {
      return this.sessionID != null;
    }

    public void setSessionIDIsSet(boolean value) {
      if (!value) {
        this.sessionID = null;
      }
    }

    public String getUserID() {
      return this.userID;
    }

    public checkSession_args setUserID(String userID) {
      this.userID = userID;
      return this;
    }

    public void unsetUserID() {
      this.userID = null;
    }

    /** Returns true if field userID is set (has been assigned a value) and false otherwise */
    public boolean isSetUserID() {
      return this.userID != null;
    }

    public void setUserIDIsSet(boolean value) {
      if (!value) {
        this.userID = null;
      }
    }

    public String getUserAgent() {
      return this.userAgent;
    }

    public checkSession_args setUserAgent(String userAgent) {
      this.userAgent = userAgent;
      return this;
    }

    public void unsetUserAgent() {
      this.userAgent = null;
    }

    /** Returns true if field userAgent is set (has been assigned a value) and false otherwise */
    public boolean isSetUserAgent() {
      return this.userAgent != null;
    }

    public void setUserAgentIsSet(boolean value) {
      if (!value) {
        this.userAgent = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GAME_ID:
        if (value == null) {
          unsetGameID();
        } else {
          setGameID((String)value);
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSessionID();
        } else {
          setSessionID((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserID();
        } else {
          setUserID((String)value);
        }
        break;

      case USER_AGENT:
        if (value == null) {
          unsetUserAgent();
        } else {
          setUserAgent((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GAME_ID:
        return getGameID();

      case SESSION_ID:
        return getSessionID();

      case USER_ID:
        return getUserID();

      case USER_AGENT:
        return getUserAgent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GAME_ID:
        return isSetGameID();
      case SESSION_ID:
        return isSetSessionID();
      case USER_ID:
        return isSetUserID();
      case USER_AGENT:
        return isSetUserAgent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkSession_args)
        return this.equals((checkSession_args)that);
      return false;
    }

    public boolean equals(checkSession_args that) {
      if (that == null)
        return false;

      boolean this_present_gameID = true && this.isSetGameID();
      boolean that_present_gameID = true && that.isSetGameID();
      if (this_present_gameID || that_present_gameID) {
        if (!(this_present_gameID && that_present_gameID))
          return false;
        if (!this.gameID.equals(that.gameID))
          return false;
      }

      boolean this_present_sessionID = true && this.isSetSessionID();
      boolean that_present_sessionID = true && that.isSetSessionID();
      if (this_present_sessionID || that_present_sessionID) {
        if (!(this_present_sessionID && that_present_sessionID))
          return false;
        if (!this.sessionID.equals(that.sessionID))
          return false;
      }

      boolean this_present_userID = true && this.isSetUserID();
      boolean that_present_userID = true && that.isSetUserID();
      if (this_present_userID || that_present_userID) {
        if (!(this_present_userID && that_present_userID))
          return false;
        if (!this.userID.equals(that.userID))
          return false;
      }

      boolean this_present_userAgent = true && this.isSetUserAgent();
      boolean that_present_userAgent = true && that.isSetUserAgent();
      if (this_present_userAgent || that_present_userAgent) {
        if (!(this_present_userAgent && that_present_userAgent))
          return false;
        if (!this.userAgent.equals(that.userAgent))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(checkSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      checkSession_args typedOther = (checkSession_args)other;

      lastComparison = Boolean.valueOf(isSetGameID()).compareTo(typedOther.isSetGameID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameID, typedOther.gameID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSessionID()).compareTo(typedOther.isSetSessionID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, typedOther.sessionID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, typedOther.userID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserAgent()).compareTo(typedOther.isSetUserAgent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserAgent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userAgent, typedOther.userAgent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkSession_args(");
      boolean first = true;

      sb.append("gameID:");
      if (this.gameID == null) {
        sb.append("null");
      } else {
        sb.append(this.gameID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionID:");
      if (this.sessionID == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userID:");
      if (this.userID == null) {
        sb.append("null");
      } else {
        sb.append(this.userID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userAgent:");
      if (this.userAgent == null) {
        sb.append("null");
      } else {
        sb.append(this.userAgent);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (gameID == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'gameID' was not present! Struct: " + toString());
      }
      if (sessionID == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionID' was not present! Struct: " + toString());
      }
      if (userID == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userID' was not present! Struct: " + toString());
      }
      if (userAgent == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userAgent' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkSession_argsStandardSchemeFactory implements SchemeFactory {
      public checkSession_argsStandardScheme getScheme() {
        return new checkSession_argsStandardScheme();
      }
    }

    private static class checkSession_argsStandardScheme extends StandardScheme<checkSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GAME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gameID = iprot.readString();
                struct.setGameIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionID = iprot.readString();
                struct.setSessionIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userID = iprot.readString();
                struct.setUserIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_AGENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userAgent = iprot.readString();
                struct.setUserAgentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gameID != null) {
          oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
          oprot.writeString(struct.gameID);
          oprot.writeFieldEnd();
        }
        if (struct.sessionID != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionID);
          oprot.writeFieldEnd();
        }
        if (struct.userID != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userID);
          oprot.writeFieldEnd();
        }
        if (struct.userAgent != null) {
          oprot.writeFieldBegin(USER_AGENT_FIELD_DESC);
          oprot.writeString(struct.userAgent);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkSession_argsTupleSchemeFactory implements SchemeFactory {
      public checkSession_argsTupleScheme getScheme() {
        return new checkSession_argsTupleScheme();
      }
    }

    private static class checkSession_argsTupleScheme extends TupleScheme<checkSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.gameID);
        oprot.writeString(struct.sessionID);
        oprot.writeString(struct.userID);
        oprot.writeString(struct.userAgent);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.gameID = iprot.readString();
        struct.setGameIDIsSet(true);
        struct.sessionID = iprot.readString();
        struct.setSessionIDIsSet(true);
        struct.userID = iprot.readString();
        struct.setUserIDIsSet(true);
        struct.userAgent = iprot.readString();
        struct.setUserAgentIsSet(true);
      }
    }

  }

  public static class checkSession_result implements org.apache.thrift.TBase<checkSession_result, checkSession_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkSession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkSession_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkSession_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see TCheckSessionRCode
     */
    public TCheckSessionRCode success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see TCheckSessionRCode
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TCheckSessionRCode.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkSession_result.class, metaDataMap);
    }

    public checkSession_result() {
    }

    public checkSession_result(
      TCheckSessionRCode success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkSession_result(checkSession_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public checkSession_result deepCopy() {
      return new checkSession_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see TCheckSessionRCode
     */
    public TCheckSessionRCode getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see TCheckSessionRCode
     */
    public checkSession_result setSuccess(TCheckSessionRCode success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TCheckSessionRCode)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkSession_result)
        return this.equals((checkSession_result)that);
      return false;
    }

    public boolean equals(checkSession_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(checkSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      checkSession_result typedOther = (checkSession_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkSession_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkSession_resultStandardSchemeFactory implements SchemeFactory {
      public checkSession_resultStandardScheme getScheme() {
        return new checkSession_resultStandardScheme();
      }
    }

    private static class checkSession_resultStandardScheme extends StandardScheme<checkSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = TCheckSessionRCode.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkSession_resultTupleSchemeFactory implements SchemeFactory {
      public checkSession_resultTupleScheme getScheme() {
        return new checkSession_resultTupleScheme();
      }
    }

    private static class checkSession_resultTupleScheme extends TupleScheme<checkSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = TCheckSessionRCode.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class removeSession_args implements org.apache.thrift.TBase<removeSession_args, removeSession_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeSession_args");

    private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeSession_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeSession_argsTupleSchemeFactory());
    }

    public String gameID; // required
    public String sessionID; // required
    public String userID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GAME_ID((short)1, "gameID"),
      SESSION_ID((short)2, "sessionID"),
      USER_ID((short)3, "userID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GAME_ID
            return GAME_ID;
          case 2: // SESSION_ID
            return SESSION_ID;
          case 3: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeSession_args.class, metaDataMap);
    }

    public removeSession_args() {
    }

    public removeSession_args(
      String gameID,
      String sessionID,
      String userID)
    {
      this();
      this.gameID = gameID;
      this.sessionID = sessionID;
      this.userID = userID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeSession_args(removeSession_args other) {
      if (other.isSetGameID()) {
        this.gameID = other.gameID;
      }
      if (other.isSetSessionID()) {
        this.sessionID = other.sessionID;
      }
      if (other.isSetUserID()) {
        this.userID = other.userID;
      }
    }

    public removeSession_args deepCopy() {
      return new removeSession_args(this);
    }

    @Override
    public void clear() {
      this.gameID = null;
      this.sessionID = null;
      this.userID = null;
    }

    public String getGameID() {
      return this.gameID;
    }

    public removeSession_args setGameID(String gameID) {
      this.gameID = gameID;
      return this;
    }

    public void unsetGameID() {
      this.gameID = null;
    }

    /** Returns true if field gameID is set (has been assigned a value) and false otherwise */
    public boolean isSetGameID() {
      return this.gameID != null;
    }

    public void setGameIDIsSet(boolean value) {
      if (!value) {
        this.gameID = null;
      }
    }

    public String getSessionID() {
      return this.sessionID;
    }

    public removeSession_args setSessionID(String sessionID) {
      this.sessionID = sessionID;
      return this;
    }

    public void unsetSessionID() {
      this.sessionID = null;
    }

    /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionID() {
      return this.sessionID != null;
    }

    public void setSessionIDIsSet(boolean value) {
      if (!value) {
        this.sessionID = null;
      }
    }

    public String getUserID() {
      return this.userID;
    }

    public removeSession_args setUserID(String userID) {
      this.userID = userID;
      return this;
    }

    public void unsetUserID() {
      this.userID = null;
    }

    /** Returns true if field userID is set (has been assigned a value) and false otherwise */
    public boolean isSetUserID() {
      return this.userID != null;
    }

    public void setUserIDIsSet(boolean value) {
      if (!value) {
        this.userID = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GAME_ID:
        if (value == null) {
          unsetGameID();
        } else {
          setGameID((String)value);
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSessionID();
        } else {
          setSessionID((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserID();
        } else {
          setUserID((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GAME_ID:
        return getGameID();

      case SESSION_ID:
        return getSessionID();

      case USER_ID:
        return getUserID();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GAME_ID:
        return isSetGameID();
      case SESSION_ID:
        return isSetSessionID();
      case USER_ID:
        return isSetUserID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeSession_args)
        return this.equals((removeSession_args)that);
      return false;
    }

    public boolean equals(removeSession_args that) {
      if (that == null)
        return false;

      boolean this_present_gameID = true && this.isSetGameID();
      boolean that_present_gameID = true && that.isSetGameID();
      if (this_present_gameID || that_present_gameID) {
        if (!(this_present_gameID && that_present_gameID))
          return false;
        if (!this.gameID.equals(that.gameID))
          return false;
      }

      boolean this_present_sessionID = true && this.isSetSessionID();
      boolean that_present_sessionID = true && that.isSetSessionID();
      if (this_present_sessionID || that_present_sessionID) {
        if (!(this_present_sessionID && that_present_sessionID))
          return false;
        if (!this.sessionID.equals(that.sessionID))
          return false;
      }

      boolean this_present_userID = true && this.isSetUserID();
      boolean that_present_userID = true && that.isSetUserID();
      if (this_present_userID || that_present_userID) {
        if (!(this_present_userID && that_present_userID))
          return false;
        if (!this.userID.equals(that.userID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeSession_args typedOther = (removeSession_args)other;

      lastComparison = Boolean.valueOf(isSetGameID()).compareTo(typedOther.isSetGameID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameID, typedOther.gameID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSessionID()).compareTo(typedOther.isSetSessionID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, typedOther.sessionID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, typedOther.userID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeSession_args(");
      boolean first = true;

      sb.append("gameID:");
      if (this.gameID == null) {
        sb.append("null");
      } else {
        sb.append(this.gameID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionID:");
      if (this.sessionID == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userID:");
      if (this.userID == null) {
        sb.append("null");
      } else {
        sb.append(this.userID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (gameID == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'gameID' was not present! Struct: " + toString());
      }
      if (sessionID == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionID' was not present! Struct: " + toString());
      }
      if (userID == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userID' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeSession_argsStandardSchemeFactory implements SchemeFactory {
      public removeSession_argsStandardScheme getScheme() {
        return new removeSession_argsStandardScheme();
      }
    }

    private static class removeSession_argsStandardScheme extends StandardScheme<removeSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GAME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gameID = iprot.readString();
                struct.setGameIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionID = iprot.readString();
                struct.setSessionIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userID = iprot.readString();
                struct.setUserIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gameID != null) {
          oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
          oprot.writeString(struct.gameID);
          oprot.writeFieldEnd();
        }
        if (struct.sessionID != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionID);
          oprot.writeFieldEnd();
        }
        if (struct.userID != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeSession_argsTupleSchemeFactory implements SchemeFactory {
      public removeSession_argsTupleScheme getScheme() {
        return new removeSession_argsTupleScheme();
      }
    }

    private static class removeSession_argsTupleScheme extends TupleScheme<removeSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.gameID);
        oprot.writeString(struct.sessionID);
        oprot.writeString(struct.userID);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.gameID = iprot.readString();
        struct.setGameIDIsSet(true);
        struct.sessionID = iprot.readString();
        struct.setSessionIDIsSet(true);
        struct.userID = iprot.readString();
        struct.setUserIDIsSet(true);
      }
    }

  }

  public static class removeSession_result implements org.apache.thrift.TBase<removeSession_result, removeSession_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeSession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeSession_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeSession_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see TCheckSessionRCode
     */
    public TCheckSessionRCode success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see TCheckSessionRCode
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TCheckSessionRCode.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeSession_result.class, metaDataMap);
    }

    public removeSession_result() {
    }

    public removeSession_result(
      TCheckSessionRCode success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeSession_result(removeSession_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public removeSession_result deepCopy() {
      return new removeSession_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see TCheckSessionRCode
     */
    public TCheckSessionRCode getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see TCheckSessionRCode
     */
    public removeSession_result setSuccess(TCheckSessionRCode success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TCheckSessionRCode)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeSession_result)
        return this.equals((removeSession_result)that);
      return false;
    }

    public boolean equals(removeSession_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeSession_result typedOther = (removeSession_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeSession_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeSession_resultStandardSchemeFactory implements SchemeFactory {
      public removeSession_resultStandardScheme getScheme() {
        return new removeSession_resultStandardScheme();
      }
    }

    private static class removeSession_resultStandardScheme extends StandardScheme<removeSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = TCheckSessionRCode.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeSession_resultTupleSchemeFactory implements SchemeFactory {
      public removeSession_resultTupleScheme getScheme() {
        return new removeSession_resultTupleScheme();
      }
    }

    private static class removeSession_resultTupleScheme extends TupleScheme<removeSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = TCheckSessionRCode.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
